@page "/tickets/{TicketId:guid}"
@using TicketManagement.Web.Services
@using TicketManagement.Contracts.DTOs
@inject TicketManagementApiClient ApiClient
@inject NavigationManager Navigation
@attribute [Authorize]

<PageTitle>@(ticket?.Title ?? "Ticket") - Ticket Management</PageTitle>

@if (isLoading)
{
    <div class="text-center py-5">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p class="mt-2 text-muted">Loading ticket...</p>
    </div>
}
else if (ticket != null)
{
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="/projects">Projects</a></li>
                    <li class="breadcrumb-item"><a href="/projects/@ticket.ProjectId">@ticket.ProjectName</a></li>
                    <li class="breadcrumb-item active">@ticket.Title</li>
                </ol>
            </nav>
            <h1><span class="bi bi-clipboard-data" aria-hidden="true"></span> @ticket.Title</h1>
        </div>
        <div class="d-flex gap-2">
            <button class="btn btn-outline-primary" @onclick="ShowEditTicketModal">
                <span class="bi bi-pencil" aria-hidden="true"></span> Edit
            </button>
            <a href="/projects/@ticket.ProjectId" class="btn btn-outline-secondary">
                <span class="bi bi-arrow-left" aria-hidden="true"></span> Back to Project
            </a>
        </div>
    </div>

    <div class="row">
        <!-- Ticket Details -->
        <div class="col-md-8">
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="mb-0">Ticket Details</h5>
                </div>
                <div class="card-body">
                    <div class="row mb-3">
                        <div class="col-sm-3 fw-bold">Status:</div>
                        <div class="col-sm-9">
                            <span class="badge bg-@GetStatusColor(ticket.Status) fs-6">@ticket.Status</span>
                        </div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-sm-3 fw-bold">Priority:</div>
                        <div class="col-sm-9">
                            <span class="badge bg-@GetPriorityColor(ticket.Priority) fs-6">@ticket.Priority</span>
                        </div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-sm-3 fw-bold">Project:</div>
                        <div class="col-sm-9">
                            <a href="/projects/@ticket.ProjectId" class="text-decoration-none">@ticket.ProjectName</a>
                        </div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-sm-3 fw-bold">Created:</div>
                        <div class="col-sm-9">@ticket.CreatedAt.ToString("MMM dd, yyyy 'at' HH:mm")</div>
                    </div>
                    @if (ticket.UpdatedAt.HasValue)
                    {
                        <div class="row mb-3">
                            <div class="col-sm-3 fw-bold">Updated:</div>
                            <div class="col-sm-9">@ticket.UpdatedAt.Value.ToString("MMM dd, yyyy 'at' HH:mm")</div>
                        </div>
                    }
                    <div class="row mb-3">
                        <div class="col-sm-3 fw-bold">Assignees:</div>
                        <div class="col-sm-9">
                            @if (ticket.Assignments?.Any() == true)
                            {
                                <span class="text-muted">@ticket.Assignments.Count assigned</span>
                            }
                            else
                            {
                                <span class="text-muted">Unassigned</span>
                            }
                        </div>
                    </div>
                    @if (!string.IsNullOrEmpty(ticket.Description))
                    {
                        <div class="row">
                            <div class="col-sm-3 fw-bold">Description:</div>
                            <div class="col-sm-9">
                                <div class="border rounded p-3 bg-light">
                                    @((MarkupString)ticket.Description.Replace("\n", "<br>"))
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>

            <!-- Comments Section -->
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">Comments (@(comments?.Count ?? 0))</h5>
                    <button class="btn btn-primary btn-sm" @onclick="ShowAddCommentModal">
                        <span class="bi bi-chat-left-text" aria-hidden="true"></span> Add Comment
                    </button>
                </div>
                <div class="card-body">
                    @if (comments?.Any() == true)
                    {
                        <div class="timeline">
                            @foreach (var comment in comments.OrderBy(c => c.CreatedAt))
                            {
                                <div class="timeline-item mb-4">
                                    <div class="d-flex">
                                        <div class="flex-shrink-0">
                                            <div class="bg-primary rounded-circle d-flex align-items-center justify-content-center text-white" style="width: 40px; height: 40px;">
                                                <span class="bi bi-person-fill"></span>
                                            </div>
                                        </div>
                                        <div class="flex-grow-1 ms-3">
                                            <div class="d-flex justify-content-between align-items-center mb-2">
                                                <h6 class="mb-0">@comment.CreatedBy</h6>
                                                <small class="text-muted">@comment.CreatedAt.ToString("MMM dd, yyyy 'at' HH:mm")</small>
                                            </div>
                                            <div class="border rounded p-3 bg-light">
                                                @((MarkupString)comment.Content.Replace("\n", "<br>"))
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="text-center text-muted py-4">
                            <span class="bi bi-chat-left fs-1 d-block mb-2" aria-hidden="true"></span>
                            <p>No comments yet. Be the first to add one!</p>
                            <button class="btn btn-primary" @onclick="ShowAddCommentModal">
                                <span class="bi bi-chat-left-text" aria-hidden="true"></span> Add First Comment
                            </button>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Sidebar -->
        <div class="col-md-4">
            <!-- Quick Actions -->
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="mb-0">Quick Actions</h5>
                </div>
                <div class="card-body">
                    <div class="d-grid gap-2">
                        <button class="btn btn-outline-primary" @onclick="ShowEditTicketModal">
                            <span class="bi bi-pencil" aria-hidden="true"></span> Edit Ticket
                        </button>
                        <button class="btn btn-outline-info" disabled>
                            <span class="bi bi-arrow-repeat" aria-hidden="true"></span> Change Status
                        </button>
                        <button class="btn btn-outline-warning" disabled>
                            <span class="bi bi-exclamation-triangle" aria-hidden="true"></span> Change Priority
                        </button>
                        <button class="btn btn-outline-success" @onclick="ShowAddCommentModal">
                            <span class="bi bi-chat-left-text" aria-hidden="true"></span> Add Comment
                        </button>
                    </div>
                </div>
            </div>

            <!-- Activity Summary -->
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">Activity Summary</h5>
                </div>
                <div class="card-body">
                    <div class="row text-center">
                        <div class="col-6">
                            <h6 class="text-primary">@(comments?.Count ?? 0)</h6>
                            <small class="text-muted">Comments</small>
                        </div>
                        <div class="col-6">
                            <h6 class="text-info">@(ticket.Assignments?.Count ?? 0)</h6>
                            <small class="text-muted">Assignees</small>
                        </div>
                    </div>
                    <hr>
                    <div class="text-center">
                        <small class="text-muted">
                            Created @ticket.CreatedAt.ToShortDateString()
                        </small>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <div class="text-center py-5">
        <span class="bi bi-exclamation-triangle fs-1 text-muted d-block mb-3" aria-hidden="true"></span>
        <h3>Ticket not found</h3>
        <p class="text-muted mb-4">The ticket you're looking for doesn't exist or you don't have access to it.</p>
        <a href="/tickets" class="btn btn-primary">
            <span class="bi bi-arrow-left" aria-hidden="true"></span> Back to Tickets
        </a>
    </div>
}

<!-- Edit Ticket Modal -->
<div class="modal fade @(showEditTicketModal ? "show" : "")" style="display: @(showEditTicketModal ? "block" : "none")" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Edit Ticket</h5>
                <button type="button" class="btn-close" @onclick="HideEditTicketModal"></button>
            </div>
            <div class="modal-body">
                <EditForm Model="editTicketForm" OnValidSubmit="UpdateTicket">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="text-danger" />

                    <div class="mb-3">
                        <label for="editTicketTitle" class="form-label">Title</label>
                        <InputText id="editTicketTitle" class="form-control" @bind-Value="editTicketForm.Title" />
                        <ValidationMessage For="@(() => editTicketForm.Title)" />
                    </div>

                    <div class="mb-3">
                        <label for="editTicketDescription" class="form-label">Description</label>
                        <InputTextArea id="editTicketDescription" class="form-control" rows="4" @bind-Value="editTicketForm.Description" />
                    </div>

                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="editTicketStatus" class="form-label">Status</label>
                                <InputSelect id="editTicketStatus" class="form-select" @bind-Value="editTicketForm.Status">
                                    <option value="Open">Open</option>
                                    <option value="InProgress">In Progress</option>
                                    <option value="Review">Review</option>
                                    <option value="Closed">Closed</option>
                                    <option value="OnHold">On Hold</option>
                                </InputSelect>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="editTicketPriority" class="form-label">Priority</label>
                                <InputSelect id="editTicketPriority" class="form-select" @bind-Value="editTicketForm.Priority">
                                    <option value="Low">Low</option>
                                    <option value="Medium">Medium</option>
                                    <option value="High">High</option>
                                    <option value="Critical">Critical</option>
                                </InputSelect>
                            </div>
                        </div>
                    </div>

                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="HideEditTicketModal">Cancel</button>
                        <button type="submit" class="btn btn-primary" disabled="@isUpdatingTicket">
                            @if (isUpdatingTicket)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                            }
                            Update Ticket
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

<!-- Add Comment Modal -->
<div class="modal fade @(showAddCommentModal ? "show" : "")" style="display: @(showAddCommentModal ? "block" : "none")" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add Comment</h5>
                <button type="button" class="btn-close" @onclick="HideAddCommentModal"></button>
            </div>
            <div class="modal-body">
                <EditForm Model="addCommentForm" OnValidSubmit="AddComment">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="text-danger" />

                    <div class="mb-3">
                        <label for="commentContent" class="form-label">Comment</label>
                        <InputTextArea id="commentContent" class="form-control" rows="4" @bind-Value="addCommentForm.Content" placeholder="Enter your comment..." />
                        <ValidationMessage For="@(() => addCommentForm.Content)" />
                    </div>

                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="HideAddCommentModal">Cancel</button>
                        <button type="submit" class="btn btn-primary" disabled="@isAddingComment">
                            @if (isAddingComment)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                            }
                            Add Comment
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@if (showEditTicketModal || showAddCommentModal)
{
    <div class="modal-backdrop fade show"></div>
}

@code {
    [Parameter] public Guid TicketId { get; set; }

    private TicketDto? ticket;
    private List<CommentDto>? comments;
    private bool isLoading = true;
    private bool showEditTicketModal = false;
    private bool showAddCommentModal = false;
    private bool isUpdatingTicket = false;
    private bool isAddingComment = false;

    private EditTicketFormModel editTicketForm = new();
    private AddCommentFormModel addCommentForm = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadTicket();
        await LoadComments();
    }

    private async Task LoadTicket()
    {
        try
        {
            var response = await ApiClient.GetTicketAsync(TicketId);
            if (response?.Success == true && response.Data != null)
            {
                ticket = response.Data;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading ticket: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadComments()
    {
        try
        {
            var response = await ApiClient.GetTicketCommentsAsync(TicketId);
            if (response?.Success == true && response.Data != null)
            {
                comments = response.Data.OrderByDescending(c => c.CreatedAt).ToList();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading comments: {ex.Message}");
        }
    }

    private void ShowEditTicketModal()
    {
        if (ticket != null)
        {
            editTicketForm = new EditTicketFormModel
            {
                Title = ticket.Title,
                Description = ticket.Description,
                Status = ticket.Status.ToString(),
                Priority = ticket.Priority.ToString()
            };
            showEditTicketModal = true;
        }
    }

    private void HideEditTicketModal()
    {
        showEditTicketModal = false;
        editTicketForm = new EditTicketFormModel();
    }

    private void ShowAddCommentModal()
    {
        addCommentForm = new AddCommentFormModel();
        showAddCommentModal = true;
    }

    private void HideAddCommentModal()
    {
        showAddCommentModal = false;
        addCommentForm = new AddCommentFormModel();
    }

    private async Task UpdateTicket()
    {
        if (ticket == null) return;

        isUpdatingTicket = true;
        try
        {
            var updateDto = new UpdateTicketDto
            {
                Title = editTicketForm.Title,
                Description = editTicketForm.Description,
                Status = Enum.Parse<TicketManagement.Core.Enums.TicketStatus>(editTicketForm.Status),
                Priority = Enum.Parse<TicketManagement.Core.Enums.TicketPriority>(editTicketForm.Priority)
            };

            var response = await ApiClient.UpdateTicketAsync(TicketId, updateDto);
            if (response?.Success == true)
            {
                HideEditTicketModal();
                await LoadTicket();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating ticket: {ex.Message}");
        }
        finally
        {
            isUpdatingTicket = false;
        }
    }

    private async Task AddComment()
    {
        isAddingComment = true;
        try
        {
            var createDto = new CreateCommentDto
            {
                Content = addCommentForm.Content
            };

            var response = await ApiClient.AddCommentAsync(TicketId, createDto);
            if (response?.Success == true)
            {
                HideAddCommentModal();
                await LoadComments();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding comment: {ex.Message}");
        }
        finally
        {
            isAddingComment = false;
        }
    }

    private string GetStatusColor(TicketManagement.Core.Enums.TicketStatus status)
    {
        return status switch
        {
            TicketManagement.Core.Enums.TicketStatus.Open => "primary",
            TicketManagement.Core.Enums.TicketStatus.InProgress => "warning",
            TicketManagement.Core.Enums.TicketStatus.Review => "info",
            TicketManagement.Core.Enums.TicketStatus.Closed => "success",
            TicketManagement.Core.Enums.TicketStatus.OnHold => "secondary",
            _ => "dark"
        };
    }

    private string GetPriorityColor(TicketManagement.Core.Enums.TicketPriority priority)
    {
        return priority switch
        {
            TicketManagement.Core.Enums.TicketPriority.Low => "secondary",
            TicketManagement.Core.Enums.TicketPriority.Medium => "primary",
            TicketManagement.Core.Enums.TicketPriority.High => "warning",
            TicketManagement.Core.Enums.TicketPriority.Critical => "danger",
            _ => "dark"
        };
    }

    private class EditTicketFormModel
    {
        [Required]
        [StringLength(200, MinimumLength = 1)]
        public string Title { get; set; } = string.Empty;

        [StringLength(2000)]
        public string Description { get; set; } = string.Empty;

        public string Status { get; set; } = "Open";

        public string Priority { get; set; } = "Medium";
    }

    private class AddCommentFormModel
    {
        [Required]
        [StringLength(2000, MinimumLength = 1)]
        public string Content { get; set; } = string.Empty;
    }
}