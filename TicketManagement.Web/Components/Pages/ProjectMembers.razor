@page "/projects/{ProjectId:guid}/members"
@using TicketManagement.Web.Client.Services
@using TicketManagement.Contracts.DTOs
@using TicketManagement.Core.Enums
@using System.ComponentModel.DataAnnotations
@inject TicketManagementApiClient ApiClient
@inject NavigationManager Navigation
@attribute [Authorize]

<PageTitle>@(project?.Name ?? "Project") Members - Ticket Management</PageTitle>

@if (isLoading)
{
    <div class="text-center py-5">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p class="mt-2 text-muted">Loading project members...</p>
    </div>
}
else if (project != null)
{
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="/projects">Projects</a></li>
                    <li class="breadcrumb-item"><a href="/projects/@ProjectId">@project.Name</a></li>
                    <li class="breadcrumb-item active">Members</li>
                </ol>
            </nav>
            <h1><span class="bi bi-people-fill" aria-hidden="true"></span> Project Members</h1>
        </div>
        @if (canManageMembers)
        {
            <button class="btn btn-primary" @onclick="ShowAddMemberModal">
                <span class="bi bi-person-plus" aria-hidden="true"></span> Add Member
            </button>
        }
    </div>

    <!-- Project Info Card -->
    <div class="card mb-4">
        <div class="card-body">
            <h5 class="card-title">@project.Name</h5>
            <p class="card-text text-muted">@project.Description</p>
            <div class="d-flex justify-content-between align-items-center">
                <small class="text-muted">@members?.Count members</small>
                <span class="badge bg-@(project.IsActive ? "success" : "secondary")">
                    @(project.IsActive ? "Active" : "Inactive")
                </span>
            </div>
        </div>
    </div>

    <!-- Members List -->
    <div class="card">
        <div class="card-header">
            <h5 class="mb-0">Team Members</h5>
        </div>
        <div class="card-body">
            @if (members?.Any() == true)
            {
                <div class="row">
                    @foreach (var member in members.OrderBy(m => m.Role).ThenBy(m => m.UserId))
                    {
                        <div class="col-md-6 col-lg-4 mb-3">
                            <div class="card h-100">
                                <div class="card-body">
                                    <div class="d-flex align-items-center mb-3">
                                        <div class="avatar-circle me-3">
                                            <span class="bi bi-person-circle fs-1 text-muted"></span>
                                        </div>
                                        <div class="flex-grow-1">
                                            <h6 class="card-title mb-1">@(!string.IsNullOrEmpty(member.UserName) ? member.UserName : member.UserId)</h6>
                                            @if (!string.IsNullOrEmpty(member.Email))
                                            {
                                                <p class="text-muted small mb-1">@member.Email</p>
                                            }
                                            <span class="badge bg-@GetRoleColor(member.Role)">@GetRoleDisplayName(member.Role)</span>
                                        </div>
                                    </div>
                                    <div class="text-muted small">
                                        <div class="mb-1">
                                            <span class="bi bi-calendar-plus me-1"></span>
                                            Joined @member.JoinedAt.ToString("MMM dd, yyyy")
                                        </div>
                                    </div>
                                </div>
                                <div class="card-footer bg-transparent">
                                    @if (canManageMembers)
                                    {
                                        <div class="btn-group w-100">
                                            <button class="btn btn-outline-warning btn-sm" @onclick="() => ShowEditMemberModal(member)">
                                                <span class="bi bi-pencil" aria-hidden="true"></span> Edit Role
                                            </button>
                                            <button class="btn btn-outline-danger btn-sm" @onclick="() => ShowRemoveMemberModal(member)">
                                                <span class="bi bi-person-dash" aria-hidden="true"></span> Remove
                                            </button>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="text-center py-4">
                    <span class="bi bi-people fs-1 text-muted d-block mb-2" aria-hidden="true"></span>
                    <p class="text-muted">No members found for this project</p>
                    @if (canManageMembers)
                    {
                        <button class="btn btn-primary" @onclick="ShowAddMemberModal">
                            <span class="bi bi-person-plus" aria-hidden="true"></span> Add First Member
                        </button>
                    }
                </div>
            }
        </div>
    </div>
}
else
{
    <div class="text-center py-5">
        <span class="bi bi-exclamation-triangle fs-1 text-muted d-block mb-3" aria-hidden="true"></span>
        <h3>Project not found</h3>
        <p class="text-muted mb-4">The project you're looking for doesn't exist or you don't have access to it.</p>
        <a href="/projects" class="btn btn-primary">
            <span class="bi bi-arrow-left" aria-hidden="true"></span> Back to Projects
        </a>
    </div>
}

<!-- Add Member Modal -->
<div class="modal fade @(showAddMemberModal ? "show" : "")" style="display: @(showAddMemberModal ? "block" : "none")" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add Project Member</h5>
                <button type="button" class="btn-close" @onclick="HideAddMemberModal"></button>
            </div>
            <div class="modal-body">
                <EditForm Model="memberForm" OnValidSubmit="AddMember">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="text-danger" />

                    <div class="mb-3">
                        <label for="userId" class="form-label">Organization Member</label>
                        @if (organizationMembers?.Any() == true)
                        {
                            <InputSelect id="userId" class="form-select" @bind-Value="memberForm.UserId">
                                <option value="">-- Select a member --</option>
                                @foreach (var orgMember in organizationMembers.Where(om => !members?.Any(pm => pm.UserId == om.UserId) == true))
                                {
                                    <option value="@orgMember.UserId">@orgMember.UserName (@GetRoleDisplayName(orgMember.Role))</option>
                                }
                            </InputSelect>
                            <div class="form-text">Select from organization members who are not already in this project</div>
                        }
                        else
                        {
                            <div class="alert alert-info">
                                <span class="bi bi-info-circle me-2"></span>
                                Loading organization members...
                            </div>
                        }
                        <ValidationMessage For="@(() => memberForm.UserId)" />
                    </div>

                    <div class="mb-3">
                        <label for="role" class="form-label">Role</label>
                        <InputSelect id="role" class="form-select" @bind-Value="memberForm.Role">
                            <option value="Viewer">Viewer</option>
                            <option value="Member">Member</option>
                            <option value="Admin">Admin</option>
                        </InputSelect>
                        <ValidationMessage For="@(() => memberForm.Role)" />
                    </div>

                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger">
                            <span class="bi bi-exclamation-triangle me-2"></span>
                            @errorMessage
                        </div>
                    }

                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="HideAddMemberModal">Cancel</button>
                        <button type="submit" class="btn btn-primary" disabled="@isAddingMember">
                            @if (isAddingMember)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                            }
                            Add Member
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

<!-- Edit Member Modal -->
<div class="modal fade @(showEditMemberModal ? "show" : "")" style="display: @(showEditMemberModal ? "block" : "none")" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Edit Member Role</h5>
                <button type="button" class="btn-close" @onclick="HideEditMemberModal"></button>
            </div>
            <div class="modal-body">
                @if (selectedMember != null)
                {
                    <EditForm Model="editMemberForm" OnValidSubmit="UpdateMemberRole">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger" />

                        <div class="mb-3">
                            <label class="form-label">User</label>
                            <div class="form-control-plaintext">
                                @(!string.IsNullOrEmpty(selectedMember.UserName) ? selectedMember.UserName : selectedMember.UserId)
                                @if (!string.IsNullOrEmpty(selectedMember.Email))
                                {
                                    <small class="text-muted d-block">@selectedMember.Email</small>
                                }
                            </div>
                        </div>

                        <div class="mb-3">
                            <label for="editRole" class="form-label">Role</label>
                            <InputSelect id="editRole" class="form-select" @bind-Value="editMemberForm.Role">
                                <option value="Viewer">Viewer</option>
                                <option value="Member">Member</option>
                                <option value="Admin">Admin</option>
                            </InputSelect>
                            <ValidationMessage For="@(() => editMemberForm.Role)" />
                        </div>

                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger">
                                <span class="bi bi-exclamation-triangle me-2"></span>
                                @errorMessage
                            </div>
                        }

                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="HideEditMemberModal">Cancel</button>
                            <button type="submit" class="btn btn-primary" disabled="@isUpdatingMember">
                                @if (isUpdatingMember)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                }
                                Update Role
                            </button>
                        </div>
                    </EditForm>
                }
            </div>
        </div>
    </div>
</div>

<!-- Remove Member Modal -->
<div class="modal fade @(showRemoveMemberModal ? "show" : "")" style="display: @(showRemoveMemberModal ? "block" : "none")" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Remove Member</h5>
                <button type="button" class="btn-close" @onclick="HideRemoveMemberModal"></button>
            </div>
            <div class="modal-body">
                @if (selectedMember != null)
                {
                    <p>Are you sure you want to remove <strong>@(!string.IsNullOrEmpty(selectedMember.UserName) ? selectedMember.UserName : selectedMember.UserId)</strong> from this project?</p>
                    @if (!string.IsNullOrEmpty(selectedMember.Email))
                    {
                        <p class="text-muted small">@selectedMember.Email</p>
                    }
                    <div class="alert alert-warning">
                        <span class="bi bi-exclamation-triangle me-2"></span>
                        This action cannot be undone. The user will lose access to this project.
                    </div>
                }
            </div>
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger">
                    <span class="bi bi-exclamation-triangle me-2"></span>
                    @errorMessage
                </div>
            }
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="HideRemoveMemberModal">Cancel</button>
                <button type="button" class="btn btn-danger" @onclick="RemoveMember" disabled="@isRemovingMember">
                    @if (isRemovingMember)
                    {
                        <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                    }
                    Remove Member
                </button>
            </div>
        </div>
    </div>
</div>

@if (showAddMemberModal || showEditMemberModal || showRemoveMemberModal)
{
    <div class="modal-backdrop fade show"></div>
}

@code {
    [Parameter] public Guid ProjectId { get; set; }

    private ProjectDto? project;
    private List<ProjectMemberDto>? members;
    private List<OrganizationMemberDto>? organizationMembers;
    private bool isLoading = true;
    private bool showAddMemberModal = false;
    private bool showEditMemberModal = false;
    private bool showRemoveMemberModal = false;
    private bool isAddingMember = false;
    private bool isUpdatingMember = false;
    private bool isRemovingMember = false;
    private bool canManageMembers = false;
    private string errorMessage = string.Empty;
    private AddMemberFormModel memberForm = new();
    private EditMemberFormModel editMemberForm = new();
    private ProjectMemberDto? selectedMember;

    protected override async Task OnInitializedAsync()
    {
        await LoadProject();
        await LoadMembers();
        await LoadOrganizationMembers();
        await CheckManagePermissions();
    }

    private async Task LoadProject()
    {
        try
        {
            var response = await ApiClient.GetProjectAsync(ProjectId);
            if (response?.Success == true && response.Data != null)
            {
                project = response.Data;
            }
        }
        catch (Exception ex)
        {
            errorMessage = "プロジェクトの読み込みに失敗しました。";
        }
    }

    private async Task LoadMembers()
    {
        try
        {
            var response = await ApiClient.GetProjectMembersAsync(ProjectId);
            if (response?.Success == true && response.Data != null)
            {
                members = response.Data.ToList();
            }
        }
        catch (Exception ex)
        {
            errorMessage = "メンバーの読み込みに失敗しました。";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task ShowAddMemberModal()
    {
        memberForm = new AddMemberFormModel();
        await LoadOrganizationMembers(); // Refresh organization members
        showAddMemberModal = true;
    }

    private void HideAddMemberModal()
    {
        showAddMemberModal = false;
        memberForm = new AddMemberFormModel();
        errorMessage = string.Empty;
    }

    private void ShowEditMemberModal(ProjectMemberDto member)
    {
        selectedMember = member;
        editMemberForm = new EditMemberFormModel
        {
            Role = member.Role.ToString()
        };
        showEditMemberModal = true;
    }

    private void HideEditMemberModal()
    {
        showEditMemberModal = false;
        selectedMember = null;
        editMemberForm = new EditMemberFormModel();
        errorMessage = string.Empty;
    }

    private void ShowRemoveMemberModal(ProjectMemberDto member)
    {
        selectedMember = member;
        showRemoveMemberModal = true;
    }

    private void HideRemoveMemberModal()
    {
        showRemoveMemberModal = false;
        selectedMember = null;
        errorMessage = string.Empty;
    }

    private async Task AddMember()
    {
        isAddingMember = true;
        errorMessage = string.Empty;
        try
        {
            var addMemberDto = new AddProjectMemberDto
            {
                UserId = memberForm.UserId,
                Role = Enum.Parse<ProjectRole>(memberForm.Role)
            };
            var response = await ApiClient.AddProjectMemberAsync(ProjectId, addMemberDto);
            if (response?.Success == true)
            {
                HideAddMemberModal();
                await LoadMembers();
            }
            else
            {
                errorMessage = response?.Message ?? "Failed to add member. Please try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An unexpected error occurred. Please try again.";
            errorMessage = "メンバーの追加に失敗しました。";
        }
        finally
        {
            isAddingMember = false;
        }
    }

    private async Task UpdateMemberRole()
    {
        if (selectedMember == null) return;

        isUpdatingMember = true;
        errorMessage = string.Empty;
        try
        {
            var updateDto = new UpdateProjectMemberDto
            {
                Role = Enum.Parse<ProjectRole>(editMemberForm.Role)
            };
            var response = await ApiClient.UpdateProjectMemberRoleAsync(ProjectId, selectedMember.UserId, updateDto);
            if (response?.Success == true)
            {
                HideEditMemberModal();
                await LoadMembers();
            }
            else
            {
                errorMessage = response?.Message ?? "Failed to update member role. Please try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An unexpected error occurred. Please try again.";
            
        }
        finally
        {
            isUpdatingMember = false;
        }
    }

    private async Task RemoveMember()
    {
        if (selectedMember == null) return;

        isRemovingMember = true;
        errorMessage = string.Empty;
        try
        {
            var response = await ApiClient.RemoveProjectMemberAsync(ProjectId, selectedMember.UserId);
            if (response?.Success == true)
            {
                HideRemoveMemberModal();
                await LoadMembers();
            }
            else
            {
                errorMessage = response?.Message ?? "Failed to remove member. Please try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An unexpected error occurred. Please try again.";
            
        }
        finally
        {
            isRemovingMember = false;
        }
    }

    private string GetRoleColor(ProjectRole role)
    {
        return role switch
        {
            ProjectRole.Admin => "danger",
            ProjectRole.Member => "primary",
            ProjectRole.Viewer => "secondary",
            _ => "dark"
        };
    }

    private string GetRoleDisplayName(ProjectRole role)
    {
        return role switch
        {
            ProjectRole.Admin => "Admin",
            ProjectRole.Member => "Member",
            ProjectRole.Viewer => "Viewer",
            _ => role.ToString()
        };
    }

    private string GetRoleDisplayName(OrganizationRole role)
    {
        return role switch
        {
            OrganizationRole.Admin => "Organization Admin",
            OrganizationRole.Manager => "Organization Manager",
            OrganizationRole.Member => "Organization Member",
            _ => role.ToString()
        };
    }

    private async Task LoadOrganizationMembers()
    {
        if (project?.OrganizationId == null) return;

        try
        {
            var response = await ApiClient.GetOrganizationMembersAsync(project.OrganizationId);
            if (response?.Success == true && response.Data != null)
            {
                organizationMembers = response.Data.ToList();
            }
        }
        catch (Exception ex)
        {
            
        }
    }

    private async Task CheckManagePermissions()
    {
        if (project == null) return;

        try
        {
            // Check if user is organization admin/manager or project admin
            var userDetailsResponse = await ApiClient.GetCurrentUserDetailsAsync();
            if (userDetailsResponse?.Success == true && userDetailsResponse.Data != null)
            {
                var userDetails = userDetailsResponse.Data;
                
                // Check if user is project admin
                var isProjectAdmin = members?.Any(m => m.UserId == userDetails.Id && m.Role == ProjectRole.Admin) == true;
                
                // Check if user is organization admin/manager
                var userOrgMembership = userDetails.Organizations?.FirstOrDefault(o => o.OrganizationId == project.OrganizationId);
                var isOrgAdminOrManager = userOrgMembership?.Role == OrganizationRole.Admin || userOrgMembership?.Role == OrganizationRole.Manager;
                
                canManageMembers = isProjectAdmin || isOrgAdminOrManager;
            }
        }
        catch (Exception ex)
        {
            
            canManageMembers = false;
        }
    }

    private class AddMemberFormModel
    {
        [Required]
        [StringLength(100, MinimumLength = 1)]
        public string UserId { get; set; } = string.Empty;

        [Required]
        public string Role { get; set; } = "Member";
    }

    private class EditMemberFormModel
    {
        [Required]
        public string Role { get; set; } = "Member";
    }
}