@page "/projects/{ProjectId:guid}"
@using TicketManagement.Web.Client.Services
@using TicketManagement.Contracts.DTOs
@using System.ComponentModel.DataAnnotations
@inject TicketManagementApiClient ApiClient
@inject NavigationManager Navigation
@inject ILogger<ProjectDetail> Logger
@inject IJSRuntime JSRuntime
@attribute [Authorize]

<PageTitle>@(project?.Name ?? "Project") - Ticket Management</PageTitle>

@if (isLoading)
{
    <div class="d-flex justify-content-center align-items-center" style="min-height: 60vh;">
        <div class="text-center">
            <div class="spinner-border text-primary mb-3" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="text-muted">Loading project details...</p>
        </div>
    </div>
}
else if (project != null)
{
    <!-- Modern Header -->
    <div class="mb-5">
        <nav aria-label="breadcrumb" class="mb-3">
            <ol class="breadcrumb">
                <li class="breadcrumb-item"><a href="/projects" class="text-decoration-none">Projects</a></li>
                <li class="breadcrumb-item active text-muted">@project.Name</li>
            </ol>
        </nav>
        
        <div class="d-flex justify-content-between align-items-start">
            <div>
                <h1 class="display-6 mb-2 d-flex align-items-center gap-3">
                    <span class="d-inline-flex align-items-center justify-content-center rounded-circle bg-primary bg-opacity-10 p-3">
                        <i class="bi bi-folder-fill text-primary fs-4"></i>
                    </span>
                    @project.Name
                </h1>
                <p class="text-muted mb-0">@project.Description</p>
            </div>
            <div class="d-flex gap-2">
                <button class="btn btn-primary" @onclick="ShowCreateTicketModal" @onclick:preventDefault="true">
                    <span class="bi bi-plus-circle" aria-hidden="true"></span> New Ticket
                </button>
                <a href="/projects/@ProjectId/members" class="btn btn-outline-primary">
                    <span class="bi bi-people" aria-hidden="true"></span> Manage Members
                </a>
                <button class="btn btn-outline-danger" @onclick="ShowDeleteProjectModal" @onclick:preventDefault="true">
                    <span class="bi bi-trash" aria-hidden="true"></span> Delete Project
                </button>
            </div>
        </div>
    </div>

    <!-- Stats Cards -->
    <div class="row g-4 mb-5">
        <div class="col-md-3">
            <div class="card border-0 shadow-sm h-100">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-start mb-2">
                        <div>
                            <p class="text-muted mb-1 small">Total Tickets</p>
                            <h3 class="mb-0">@(tickets?.Count ?? 0)</h3>
                        </div>
                        <span class="rounded-circle bg-primary bg-opacity-10 p-2">
                            <i class="bi bi-ticket-fill text-primary"></i>
                        </span>
                    </div>
                    <div class="progress" style="height: 4px;">
                        <div class="progress-bar bg-primary" style="width: 100%"></div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-md-3">
            <div class="card border-0 shadow-sm h-100">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-start mb-2">
                        <div>
                            <p class="text-muted mb-1 small">Open</p>
                            <h3 class="mb-0">@(tickets?.Count(t => t.Status == TicketManagement.Core.Enums.TicketStatus.Open) ?? 0)</h3>
                        </div>
                        <span class="rounded-circle bg-info bg-opacity-10 p-2">
                            <i class="bi bi-circle text-info"></i>
                        </span>
                    </div>
                    <div class="progress" style="height: 4px;">
                        <div class="progress-bar bg-info" style="width: @((tickets?.Count ?? 0) > 0 ? (tickets.Count(t => t.Status == TicketManagement.Core.Enums.TicketStatus.Open) * 100.0 / tickets.Count) : 0)%"></div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-md-3">
            <div class="card border-0 shadow-sm h-100">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-start mb-2">
                        <div>
                            <p class="text-muted mb-1 small">In Progress</p>
                            <h3 class="mb-0">@(tickets?.Count(t => t.Status == TicketManagement.Core.Enums.TicketStatus.InProgress) ?? 0)</h3>
                        </div>
                        <span class="rounded-circle bg-warning bg-opacity-10 p-2">
                            <i class="bi bi-arrow-repeat text-warning"></i>
                        </span>
                    </div>
                    <div class="progress" style="height: 4px;">
                        <div class="progress-bar bg-warning" style="width: @((tickets?.Count ?? 0) > 0 ? (tickets.Count(t => t.Status == TicketManagement.Core.Enums.TicketStatus.InProgress) * 100.0 / tickets.Count) : 0)%"></div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-md-3">
            <div class="card border-0 shadow-sm h-100">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-start mb-2">
                        <div>
                            <p class="text-muted mb-1 small">Closed</p>
                            <h3 class="mb-0">@(tickets?.Count(t => t.Status == TicketManagement.Core.Enums.TicketStatus.Closed) ?? 0)</h3>
                        </div>
                        <span class="rounded-circle bg-success bg-opacity-10 p-2">
                            <i class="bi bi-check-circle-fill text-success"></i>
                        </span>
                    </div>
                    <div class="progress" style="height: 4px;">
                        <div class="progress-bar bg-success" style="width: @((tickets?.Count ?? 0) > 0 ? (tickets.Count(t => t.Status == TicketManagement.Core.Enums.TicketStatus.Closed) * 100.0 / tickets.Count) : 0)%"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Tickets Table -->
    <div class="card border-0 shadow-sm">
        <div class="card-header bg-white border-0 py-3">
            <div class="d-flex justify-content-between align-items-center">
                <h5 class="mb-0 fw-semibold">Tickets</h5>
                <div class="d-flex gap-3 align-items-center">
                    <div class="input-group" style="width: 300px;">
                        <span class="input-group-text bg-white border-end-0">
                            <i class="bi bi-search text-muted"></i>
                        </span>
                        <input type="text" class="form-control border-start-0 ps-0" placeholder="Search tickets..." 
                               @bind="searchKeyword" @onkeypress="@(async (e) => { if (e.Key == "Enter") await SearchTickets(); })">
                    </div>
                </div>
            </div>
        </div>
        <div class="card-body p-0">
            @if (tickets?.Any() == true)
            {
                <div class="table-responsive">
                    <table class="table table-hover mb-0">
                        <thead class="table-light">
                            <tr>
                                <th class="border-0 ps-4">Title</th>
                                <th class="border-0">Status</th>
                                <th class="border-0">Priority</th>
                                <th class="border-0">Assignee</th>
                                <th class="border-0">Created</th>
                                <th class="border-0 text-end pe-4">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var ticket in tickets)
                            {
                                <tr class="align-middle">
                                    <td class="ps-4">
                                        <a href="/tickets/@ticket.Id" class="text-decoration-none text-dark fw-medium">
                                            @ticket.Title
                                        </a>
                                    </td>
                                    <td>
                                        <span class="badge rounded-pill bg-@GetStatusColor(ticket.Status) bg-opacity-10 text-@GetStatusColor(ticket.Status) px-3 py-2">
                                            @ticket.Status
                                        </span>
                                    </td>
                                    <td>
                                        <span class="badge rounded-pill bg-@GetPriorityColor(ticket.Priority) bg-opacity-10 text-@GetPriorityColor(ticket.Priority) px-3 py-2">
                                            @ticket.Priority
                                        </span>
                                    </td>
                                    <td>
                                        @if (ticket.Assignments?.Any() == true)
                                        {
                                            <div class="d-flex align-items-center">
                                                <div class="avatar-group">
                                                    @foreach (var assignment in ticket.Assignments.Take(3))
                                                    {
                                                        <span class="avatar avatar-sm rounded-circle bg-primary text-white" 
                                                              title="@assignment.AssigneeName">
                                                            @assignment.AssigneeName.Substring(0, 1).ToUpper()
                                                        </span>
                                                    }
                                                </div>
                                                @if (ticket.Assignments.Count > 3)
                                                {
                                                    <span class="ms-2 text-muted small">+@(ticket.Assignments.Count - 3)</span>
                                                }
                                            </div>
                                        }
                                        else
                                        {
                                            <span class="text-muted">Unassigned</span>
                                        }
                                    </td>
                                    <td>
                                        <small class="text-muted">@ticket.CreatedAt.ToString("MMM dd, yyyy")</small>
                                    </td>
                                    <td class="text-end pe-4">
                                        <div class="btn-group btn-group-sm">
                                            <a href="/tickets/@ticket.Id" class="btn btn-link text-primary p-1" title="View">
                                                <i class="bi bi-eye"></i>
                                            </a>
                                            <button class="btn btn-link text-warning p-1" @onclick="() => ShowEditTicketModal(ticket)" title="Edit">
                                                <i class="bi bi-pencil"></i>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
            else
            {
                <div class="text-center py-5">
                    <div class="mb-4">
                        <i class="bi bi-inbox display-1 text-muted"></i>
                    </div>
                    <h5 class="text-muted mb-3">No tickets found</h5>
                    <p class="text-muted mb-4">Get started by creating your first ticket for this project.</p>
                    <button class="btn btn-primary btn-lg" @onclick="ShowCreateTicketModal" @onclick:preventDefault="true">
                        <span class="bi bi-plus-circle" aria-hidden="true"></span> Create Your First Ticket
                    </button>
                </div>
            }
        </div>
    </div>
}
else
{
    <div class="d-flex justify-content-center align-items-center" style="min-height: 60vh;">
        <div class="text-center">
            <i class="bi bi-exclamation-triangle display-1 text-warning mb-4 d-block"></i>
            <h3 class="mb-3">Project not found</h3>
            <p class="text-muted mb-4">The project you're looking for doesn't exist or you don't have access to it.</p>
            <a href="/projects" class="btn btn-primary">
                <i class="bi bi-arrow-left me-2"></i>Back to Projects
            </a>
        </div>
    </div>
}

<!-- Create Ticket Modal -->
@if (showCreateTicketModal)
{
    <div class="modal fade show" style="display: block; background-color: rgba(0,0,0,0.5);" tabindex="-1" @onclick="HandleBackdropClick">
        <div class="modal-dialog" @onclick:stopPropagation="true">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Create New Ticket</h5>
                    <button type="button" class="btn-close" @onclick="HideCreateTicketModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="ticketForm" OnValidSubmit="CreateTicket">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger" />

                        <div class="mb-3">
                            <label for="ticketTitle" class="form-label">Title</label>
                            <InputText id="ticketTitle" class="form-control" @bind-Value="ticketForm.Title" 
                                     placeholder="Brief description of the issue" />
                            <ValidationMessage For="@(() => ticketForm.Title)" />
                        </div>

                        <div class="mb-3">
                            <label for="ticketDescription" class="form-label">Description</label>
                            <InputTextArea id="ticketDescription" class="form-control" rows="3" 
                                         @bind-Value="ticketForm.Description" 
                                         placeholder="Provide more details about the ticket" />
                            <ValidationMessage For="@(() => ticketForm.Description)" />
                        </div>

                        <div class="mb-3">
                            <label for="ticketPriority" class="form-label">Priority</label>
                            <InputSelect id="ticketPriority" class="form-select" @bind-Value="ticketForm.Priority">
                                <option value="Low">Low</option>
                                <option value="Medium">Medium</option>
                                <option value="High">High</option>
                                <option value="Critical">Critical</option>
                            </InputSelect>
                        </div>

                        <div class="mb-3">
                            <label for="ticketAssignee" class="form-label">Assign To (Optional)</label>
                            <InputSelect id="ticketAssignee" class="form-select" @bind-Value="ticketForm.AssigneeId">
                                <option value="">-- Unassigned --</option>
                                @if (projectMembers != null)
                                {
                                    @foreach (var member in projectMembers)
                                    {
                                        <option value="@member.UserId">@member.UserName</option>
                                    }
                                }
                            </InputSelect>
                        </div>

                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="HideCreateTicketModal">Cancel</button>
                            <button type="submit" class="btn btn-primary" disabled="@isCreatingTicket">
                                @if (isCreatingTicket)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                }
                                Create Ticket
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

<!-- Delete Project Modal -->
@if (showDeleteProjectModal)
{
    <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="bi bi-exclamation-triangle text-danger me-2"></i>
                        Delete Project
                    </h5>
                    <button type="button" class="btn-close" @onclick="HideDeleteProjectModal"></button>
                </div>
                <div class="modal-body">
                    <p class="mb-3">Are you sure you want to delete this project?</p>
                    <div class="alert alert-danger">
                        <i class="bi bi-exclamation-triangle me-2"></i>
                        <strong>Warning:</strong> This action cannot be undone. All tickets, comments, and project data will be permanently deleted.
                    </div>
                    @if (project != null)
                    {
                        <p><strong>Project:</strong> @project.Name</p>
                        <p class="text-muted">@project.Description</p>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="HideDeleteProjectModal">Cancel</button>
                    <button type="button" class="btn btn-danger" @onclick="DeleteProject" disabled="@isDeletingProject">
                        @if (isDeletingProject)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                        }
                        <i class="bi bi-trash me-1"></i>
                        Delete Project
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public Guid ProjectId { get; set; }

    private ProjectDto? project;
    private List<TicketDto>? tickets;
    private List<ProjectMemberDto>? projectMembers;
    private bool isLoading = true;
    private bool showCreateTicketModal = false;
    private bool isCreatingTicket = false;
    private string searchKeyword = string.Empty;
    private CreateTicketFormModel ticketForm = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadProject();
        await LoadTickets();
    }

    private async Task LoadProject()
    {
        try
        {
            var response = await ApiClient.GetProjectAsync(ProjectId);
            if (response?.Success == true && response.Data != null)
            {
                project = response.Data;
                projectMembers = response.Data.Members?.ToList();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading project {ProjectId}", ProjectId);
        }
    }

    private async Task LoadTickets()
    {
        try
        {
            var response = await ApiClient.GetProjectTicketsAsync(ProjectId);
            if (response?.Success == true && response.Data != null)
            {
                tickets = response.Data.OrderByDescending(t => t.CreatedAt).ToList();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading tickets for project {ProjectId}", ProjectId);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task SearchTickets()
    {
        if (string.IsNullOrWhiteSpace(searchKeyword))
        {
            await LoadTickets();
            return;
        }

        try
        {
            var response = await ApiClient.SearchTicketsAsync(ProjectId, searchKeyword);
            if (response?.Success == true && response.Data?.Items != null)
            {
                tickets = response.Data.Items.ToList();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error searching tickets for project {ProjectId} with keyword '{Keyword}'", ProjectId, searchKeyword);
        }
    }

    private void ShowCreateTicketModal()
    {
        Logger.LogInformation("ShowCreateTicketModal called for project {ProjectId}", ProjectId);
        ticketForm = new CreateTicketFormModel();
        showCreateTicketModal = true;
        Logger.LogDebug("showCreateTicketModal set to: {ShowCreateTicketModal}", showCreateTicketModal);
        StateHasChanged();
    }

    private void HideCreateTicketModal()
    {
        showCreateTicketModal = false;
        ticketForm = new CreateTicketFormModel();
        StateHasChanged();
    }

    private void HandleBackdropClick()
    {
        HideCreateTicketModal();
    }

    private void ShowEditTicketModal(TicketDto ticket)
    {
        Navigation.NavigateTo($"/tickets/{ticket.Id}");
    }

    private async Task CreateTicket()
    {
        isCreatingTicket = true;
        try
        {
            var createDto = new CreateTicketDto
            {
                Title = ticketForm.Title,
                Description = ticketForm.Description,
                Priority = Enum.Parse<TicketManagement.Core.Enums.TicketPriority>(ticketForm.Priority),
                Category = string.Empty, // デフォルト値を設定
                Tags = Array.Empty<string>() // 空配列を設定
            };

            Logger.LogDebug("Creating ticket with data: Title='{Title}', Description='{Description}', Priority={Priority}, Category='{Category}', Tags={Tags}, AssigneeId='{AssigneeId}'",
                createDto.Title, createDto.Description, createDto.Priority, createDto.Category, createDto.Tags.Length, ticketForm.AssigneeId);

            var response = await ApiClient.CreateTicketAsync(ProjectId, createDto);
            if (response?.Success == true && response.Data != null)
            {
                Logger.LogInformation("Ticket created successfully for project {ProjectId} with ID {TicketId}", ProjectId, response.Data.Id);
                
                // Assign the ticket if an assignee was selected
                if (!string.IsNullOrEmpty(ticketForm.AssigneeId))
                {
                    Logger.LogDebug("Assigning ticket {TicketId} to user {AssigneeId}", response.Data.Id, ticketForm.AssigneeId);
                    var assignDto = new AssignTicketDto { AssigneeId = ticketForm.AssigneeId };
                    var assignResponse = await ApiClient.AssignTicketAsync(response.Data.Id, assignDto);
                    
                    if (assignResponse?.Success == true)
                    {
                        Logger.LogInformation("Ticket {TicketId} assigned successfully to user {AssigneeId}", response.Data.Id, ticketForm.AssigneeId);
                    }
                    else
                    {
                        Logger.LogWarning("Failed to assign ticket {TicketId} to user {AssigneeId}. Response: {Message}", 
                            response.Data.Id, ticketForm.AssigneeId, assignResponse?.Message);
                    }
                }
                
                HideCreateTicketModal();
                await LoadTickets();
            }
            else
            {
                Logger.LogWarning("Ticket creation failed for project {ProjectId}. Response: Success={Success}, Message='{Message}', Errors={Errors}",
                    ProjectId, response?.Success, response?.Message, response?.Errors != null ? string.Join("; ", response.Errors) : "none");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error creating ticket for project {ProjectId}", ProjectId);
        }
        finally
        {
            isCreatingTicket = false;
        }
    }

    private string GetStatusColor(TicketManagement.Core.Enums.TicketStatus status)
    {
        return status switch
        {
            TicketManagement.Core.Enums.TicketStatus.Open => "info",
            TicketManagement.Core.Enums.TicketStatus.InProgress => "warning",
            TicketManagement.Core.Enums.TicketStatus.Review => "secondary",
            TicketManagement.Core.Enums.TicketStatus.Closed => "success",
            TicketManagement.Core.Enums.TicketStatus.OnHold => "secondary",
            _ => "dark"
        };
    }

    private string GetPriorityColor(TicketManagement.Core.Enums.TicketPriority priority)
    {
        return priority switch
        {
            TicketManagement.Core.Enums.TicketPriority.Low => "success",
            TicketManagement.Core.Enums.TicketPriority.Medium => "primary",
            TicketManagement.Core.Enums.TicketPriority.High => "warning",
            TicketManagement.Core.Enums.TicketPriority.Critical => "danger",
            _ => "dark"
        };
    }

    private class CreateTicketFormModel
    {
        [Required]
        [StringLength(200, MinimumLength = 1)]
        public string Title { get; set; } = string.Empty;

        [StringLength(2000)]
        public string Description { get; set; } = string.Empty;

        public string Priority { get; set; } = "Medium";
        
        public string? AssigneeId { get; set; }
    }

    // Delete Project Modal
    private bool showDeleteProjectModal = false;
    private bool isDeletingProject = false;

    private void ShowDeleteProjectModal()
    {
        showDeleteProjectModal = true;
        StateHasChanged();
    }

    private void HideDeleteProjectModal()
    {
        showDeleteProjectModal = false;
        StateHasChanged();
    }

    private async Task DeleteProject()
    {
        isDeletingProject = true;
        try
        {
            var response = await ApiClient.DeleteProjectAsync(ProjectId);
            if (response?.Success == true)
            {
                Navigation.NavigateTo("/projects");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error deleting project {ProjectId}", ProjectId);
        }
        finally
        {
            isDeletingProject = false;
        }
    }
}