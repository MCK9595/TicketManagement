@page "/projects"
@using TicketManagement.Web.Client.Services
@using TicketManagement.Contracts.DTOs
@using Microsoft.Extensions.Logging
@using Microsoft.AspNetCore.Components.Authorization
@using TicketManagement.Web.Components.Shared
@inject TicketManagementApiClient ApiClient
@inject NavigationManager Navigation
@inject ILogger<Projects> Logger
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize]

<PageTitle>Projects - Ticket Management</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-4">
    <div>
        <h1><span class="bi bi-folder-fill" aria-hidden="true"></span> Projects</h1>
        @if (selectedOrganization != null)
        {
            <p class="text-muted mb-0">
                <span class="bi bi-building me-1" aria-hidden="true"></span>
                @selectedOrganization.OrganizationDisplayName
            </p>
        }
    </div>
    <div class="d-flex gap-2">
        @if (userOrganizations?.Any() == true)
        {
            <div class="dropdown">
                <button class="btn btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                    <span class="bi bi-building me-2" aria-hidden="true"></span>
                    @if (selectedOrganization != null)
                    {
                        @selectedOrganization.OrganizationDisplayName
                    }
                    else
                    {
                        <span>All Organizations</span>
                    }
                </button>
                <ul class="dropdown-menu">
                    <li>
                        <button class="dropdown-item @(selectedOrganization == null ? "active" : "")" 
                                @onclick="() => FilterByOrganization(null)">
                            <span class="bi bi-globe me-2" aria-hidden="true"></span>All Organizations
                        </button>
                    </li>
                    <li><hr class="dropdown-divider"></li>
                    @foreach (var org in userOrganizations)
                    {
                        <li>
                            <button class="dropdown-item @(selectedOrganization?.OrganizationId == org.OrganizationId ? "active" : "")"
                                    @onclick="() => FilterByOrganization(org)">
                                <span class="bi bi-building me-2" aria-hidden="true"></span>
                                @org.OrganizationDisplayName
                            </button>
                        </li>
                    }
                </ul>
            </div>
        }
        <button class="btn btn-primary" @onclick="ShowCreateProjectModal" @onclick:preventDefault="true" 
                disabled="@(selectedOrganization == null)">
            <span class="bi bi-plus-circle" aria-hidden="true"></span> New Project
        </button>
    </div>
</div>

@if (selectedOrganization == null && userOrganizations?.Any() == true)
{
    <div class="alert alert-info">
        <span class="bi bi-info-circle me-2" aria-hidden="true"></span>
        <strong>Select an organization</strong> to view and create projects. Use the dropdown above to choose an organization.
    </div>
}

@if (isLoading)
{
    <LoadingSpinner Message="Loading projects..." 
                   Size="LoadingSpinner.LoadingSize.Large" 
                   AccessibleLabel="Loading project information" />
}
else if (projects?.Any() == true)
{
    <div class="row">
        @foreach (var project in projects)
        {
            <div class="col-md-6 col-lg-4 mb-4">
                <div class="card h-100">
                    <div class="card-body">
                        <h5 class="card-title">
                            <a href="/projects/@project.Id" class="text-decoration-none">
                                @project.Name
                            </a>
                        </h5>
                        @if (selectedOrganization == null && !string.IsNullOrEmpty(project.OrganizationName))
                        {
                            <p class="text-muted small mb-2">
                                <span class="bi bi-building me-1" aria-hidden="true"></span>
                                @project.OrganizationName
                            </p>
                        }
                        <p class="card-text text-muted">@project.Description</p>
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <small class="text-muted">
                                Created @project.CreatedAt.ToString("MMM dd, yyyy")
                            </small>
                            <span class="badge bg-@(project.IsActive ? "success" : "secondary")">
                                @(project.IsActive ? "Active" : "Inactive")
                            </span>
                        </div>
                        <div class="row text-center">
                            <div class="col-6">
                                <small class="text-muted">Tickets</small>
                                <div class="fw-bold">@project.TicketCount</div>
                            </div>
                            <div class="col-6">
                                <small class="text-muted">Members</small>
                                <div class="fw-bold">@project.Members.Count</div>
                            </div>
                        </div>
                    </div>
                    <div class="card-footer bg-transparent">
                        <div class="btn-group w-100" role="group">
                            <a href="/projects/@project.Id" class="btn btn-outline-primary btn-sm">
                                <span class="bi bi-eye" aria-hidden="true"></span> View
                            </a>
                            <a href="/projects/@project.Id/tickets" class="btn btn-outline-secondary btn-sm">
                                <span class="bi bi-clipboard-data" aria-hidden="true"></span> Tickets
                            </a>
                            <button class="btn btn-outline-warning btn-sm" @onclick="() => ShowEditProjectModal(project)">
                                <span class="bi bi-pencil" aria-hidden="true"></span> Edit
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
}
else
{
    <div class="text-center py-5">
        <span class="bi bi-folder-x fs-1 text-muted d-block mb-3" aria-hidden="true"></span>
        <h3>No projects found</h3>
        <p class="text-muted mb-4">Create your first project to get started with ticket management.</p>
        <button class="btn btn-primary btn-lg" @onclick="ShowCreateProjectModal" @onclick:preventDefault="true">
            <span class="bi bi-plus-circle" aria-hidden="true"></span> Create Your First Project
        </button>
    </div>
}

<!-- Create/Edit Project Modal -->
@if (showProjectModal)
{
    <div class="modal fade show" style="display: block; background-color: rgba(0,0,0,0.5);" tabindex="-1" @onclick="HandleBackdropClick">
        <div class="modal-dialog" @onclick:stopPropagation="true">
            <div class="modal-content">
                <div class="modal-header">
                <h5 class="modal-title">@(isEditMode ? "Edit Project" : "Create New Project")</h5>
                <button type="button" class="btn-close" @onclick="HideProjectModal"></button>
            </div>
            <div class="modal-body">
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <NotificationAlert Type="NotificationAlert.NotificationType.Error"
                                     Title="Error"
                                     Message="@errorMessage"
                                     IsVisible="@(!string.IsNullOrEmpty(errorMessage))"
                                     OnDismiss="@(() => errorMessage = null)"
                                     ShowActionButton="@errorMessage.Contains("session has expired")"
                                     ActionText="@(errorMessage.Contains("session has expired") ? "Login Again" : "")"
                                     OnActionClick="@RefreshPage" />
                }
                
                <EditForm Model="projectForm" OnValidSubmit="SaveProject">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="text-danger" />

                    <div class="mb-3">
                        <label for="projectName" class="form-label">Project Name</label>
                        <InputText id="projectName" class="form-control" @bind-Value="projectForm.Name" placeholder="Enter project name" />
                        <ValidationMessage For="@(() => projectForm.Name)" />
                    </div>

                    <div class="mb-3">
                        <label for="projectDescription" class="form-label">Description</label>
                        <InputTextArea id="projectDescription" class="form-control" rows="3" @bind-Value="projectForm.Description" placeholder="Enter project description" />
                        <ValidationMessage For="@(() => projectForm.Description)" />
                    </div>

                    @if (!isEditMode)
                    {
                        <div class="mb-3">
                            <label for="organizationSelect" class="form-label">Organization</label>
                            @if (userOrganizations?.Any() == true)
                            {
                                <InputSelect id="organizationSelect" class="form-select" @bind-Value="projectForm.OrganizationIdString">
                                    <option value="">Select an organization...</option>
                                    @foreach (var org in userOrganizations)
                                    {
                                        <option value="@org.OrganizationId.ToString()">@org.OrganizationDisplayName</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(() => projectForm.OrganizationId)" />
                            }
                            else
                            {
                                <div class="alert alert-warning">
                                    <span class="bi bi-exclamation-triangle me-2" aria-hidden="true"></span>
                                    No organizations available. Please create an organization first.
                                </div>
                            }
                        </div>
                    }
                    else if (selectedOrganization != null)
                    {
                        <div class="mb-3">
                            <label class="form-label">Organization</label>
                            <div class="form-control-plaintext bg-light p-2 rounded">
                                <span class="bi bi-building me-2" aria-hidden="true"></span>
                                @selectedOrganization.OrganizationDisplayName
                            </div>
                            <div class="form-text">This project belongs to the selected organization.</div>
                        </div>
                    }

                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="HideProjectModal">Cancel</button>
                        <button type="submit" class="btn btn-primary" disabled="@isSaving">
                            @if (isSaving)
                            {
                                <LoadingSpinner ShowIcon="true" 
                                              Size="LoadingSpinner.LoadingSize.Small" 
                                              Center="false" 
                                              CssClass="d-inline-flex me-2" />
                            }
                            @(isEditMode ? "Update Project" : "Create Project")
                        </button>
                    </div>
                </EditForm>
            </div>
            </div>
        </div>
    </div>
}

@code {
    private List<ProjectDto>? allProjects;
    private List<ProjectDto>? projects;
    private List<UserOrganizationDto>? userOrganizations;
    private UserOrganizationDto? selectedOrganization;
    private bool isLoading = true;
    private bool showProjectModal = false;
    private bool isEditMode = false;
    private bool isSaving = false;
    private ProjectFormModel projectForm = new();
    private ProjectDto? currentProject;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        // Debug authentication state
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        Logger.LogInformation("User authenticated: {IsAuthenticated}", authState.User.Identity?.IsAuthenticated);
        if (authState.User.Identity?.IsAuthenticated == true)
        {
            Logger.LogInformation("User claims: {Claims}", 
                string.Join(", ", authState.User.Claims.Select(c => $"{c.Type}={c.Value}")));
        }
        
        await LoadUserOrganizations();
        await LoadProjects();
    }

    private async Task LoadUserOrganizations()
    {
        try
        {
            Logger.LogInformation("Loading user organizations for Projects page...");
            var response = await ApiClient.GetOrganizationsWithRolesAsync();
            Logger.LogInformation("Response received: Success={Success}, Data={HasData}, Count={Count}", 
                response?.Success, 
                response?.Data != null,
                response?.Data?.Count ?? 0);
                
            if (response?.Success == true && response.Data != null)
            {
                userOrganizations = response.Data
                    .Where(o => o.IsActive)
                    .OrderBy(o => o.OrganizationDisplayName)
                    .ToList();

                Logger.LogInformation("Loaded {Count} active organizations", userOrganizations.Count);
                
                // Auto-select first organization if only one available
                if (userOrganizations.Count == 1)
                {
                    selectedOrganization = userOrganizations.First();
                }
            }
            else
            {
                userOrganizations = new List<UserOrganizationDto>();
                Logger.LogWarning("Failed to load organizations or no organizations found");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading user organizations");
            userOrganizations = new List<UserOrganizationDto>();
        }
    }

    private async Task LoadProjects()
    {
        isLoading = true;
        try
        {
            Logger.LogInformation("Loading projects...");
            var response = await ApiClient.GetProjectsAsync();
            Logger.LogInformation("GetProjectsAsync response: Success={Success}, Data count={DataCount}", 
                response?.Success, response?.Data?.Count);
            
            if (response?.Success == true && response.Data != null)
            {
                allProjects = response.Data.OrderByDescending(p => p.CreatedAt).ToList();
                FilterProjectsByOrganization();
                Logger.LogInformation("Loaded {ProjectCount} projects successfully", allProjects.Count);
            }
            else
            {
                Logger.LogWarning("Failed to load projects. Response Success: {Success}, Has Data: {HasData}, Message: {Message}", 
                    response?.Success, response?.Data != null, response?.Message);
                allProjects = new List<ProjectDto>();
                projects = new List<ProjectDto>();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading projects");
            allProjects = new List<ProjectDto>();
            projects = new List<ProjectDto>();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void FilterProjectsByOrganization()
    {
        if (allProjects == null)
        {
            projects = new List<ProjectDto>();
            return;
        }

        if (selectedOrganization == null)
        {
            projects = allProjects.ToList();
        }
        else
        {
            projects = allProjects
                .Where(p => p.OrganizationId == selectedOrganization.OrganizationId)
                .ToList();
        }
    }

    private async Task FilterByOrganization(UserOrganizationDto? organization)
    {
        selectedOrganization = organization;
        FilterProjectsByOrganization();
        StateHasChanged();
    }

    private void ShowCreateProjectModal()
    {
        Logger.LogInformation("ShowCreateProjectModal called");
        Logger.LogInformation("Available organizations: {Count}", userOrganizations?.Count ?? 0);
        
        isEditMode = false;
        projectForm = new ProjectFormModel();
        
        // Pre-select the first organization if available
        var firstOrg = userOrganizations?.FirstOrDefault();
        if (firstOrg != null)
        {
            projectForm.OrganizationId = firstOrg.OrganizationId;
            Logger.LogInformation("Pre-selected organization: {OrgName} ({OrgId})", 
                firstOrg.OrganizationDisplayName, firstOrg.OrganizationId);
        }
        
        currentProject = null;
        errorMessage = null;
        showProjectModal = true;
        Logger.LogDebug("showProjectModal set to: {ShowProjectModal}", showProjectModal);
        StateHasChanged();
    }

    private void ShowEditProjectModal(ProjectDto project)
    {
        isEditMode = true;
        currentProject = project;
        projectForm = new ProjectFormModel
        {
            Name = project.Name,
            Description = project.Description
        };
        errorMessage = null;
        showProjectModal = true;
        StateHasChanged();
    }

    private void HideProjectModal()
    {
        showProjectModal = false;
        projectForm = new ProjectFormModel();
        currentProject = null;
        StateHasChanged();
    }

    private void HandleBackdropClick()
    {
        HideProjectModal();
    }
    
    private void RefreshPage()
    {
        Navigation.NavigateTo(Navigation.Uri, forceLoad: true);
    }

    private async Task SaveProject()
    {
        Logger.LogInformation("SaveProject called. IsEditMode: {IsEditMode}, Name: {Name}", isEditMode, projectForm.Name);
        
        isSaving = true;
        StateHasChanged();
        
        try
        {
            if (isEditMode && currentProject != null)
            {
                Logger.LogInformation("Updating project {ProjectId}", currentProject.Id);
                var updateDto = new UpdateProjectDto
                {
                    Name = projectForm.Name,
                    Description = projectForm.Description
                };

                var response = await ApiClient.UpdateProjectAsync(currentProject.Id, updateDto);
                Logger.LogInformation("Update response: Success={Success}", response?.Success);
                
                if (response?.Success == true)
                {
                    HideProjectModal();
                    await LoadProjects();
                }
                else
                {
                    Logger.LogWarning("Failed to update project. Response: {Response}", response);
                    errorMessage = response?.Message ?? "Failed to update project. Please try again.";
                }
            }
            else
            {
                if (!projectForm.OrganizationId.HasValue)
                {
                    errorMessage = "Please select an organization to create the project.";
                    return;
                }

                Logger.LogInformation("Creating new project with name: {Name} in organization: {OrganizationId}", projectForm.Name, projectForm.OrganizationId);
                var createDto = new CreateProjectDto
                {
                    OrganizationId = projectForm.OrganizationId.Value,
                    Name = projectForm.Name,
                    Description = projectForm.Description
                };

                var response = await ApiClient.CreateProjectAsync(createDto);
                Logger.LogInformation("Create response: Success={Success}", response?.Success);
                
                if (response?.Success == true)
                {
                    Logger.LogInformation("Project created successfully, reloading projects list");
                    HideProjectModal();
                    
                    // キャッシュの問題を回避するため、少し待機してからリロード
                    await Task.Delay(500);
                    await LoadProjects();
                }
                else
                {
                    Logger.LogWarning("Failed to create project. Response: {Response}", response);
                    errorMessage = response?.Message ?? "Failed to create project. Please try again.";
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error saving project");
            errorMessage = "An unexpected error occurred. Please try again.";
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }

    private class ProjectFormModel
    {
        [Required]
        [StringLength(200, MinimumLength = 1)]
        public string Name { get; set; } = string.Empty;

        [StringLength(2000)]
        public string Description { get; set; } = string.Empty;

        private Guid? _organizationId;
        
        [Required(ErrorMessage = "Please select an organization")]
        public Guid? OrganizationId 
        { 
            get => _organizationId;
            set => _organizationId = value;
        }
        
        // Helper property for InputSelect binding with string values
        public string OrganizationIdString
        {
            get => _organizationId?.ToString() ?? "";
            set 
            {
                if (Guid.TryParse(value, out var guid))
                    _organizationId = guid;
                else
                    _organizationId = null;
            }
        }
    }
}