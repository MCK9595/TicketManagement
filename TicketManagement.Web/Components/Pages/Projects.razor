@page "/projects"
@using TicketManagement.Web.Services
@using TicketManagement.Contracts.DTOs
@using Microsoft.Extensions.Logging
@using Microsoft.AspNetCore.Components.Authorization
@inject TicketManagementApiClient ApiClient
@inject NavigationManager Navigation
@inject ILogger<Projects> Logger
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize]
@rendermode InteractiveServer

<PageTitle>Projects - Ticket Management</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1><span class="bi bi-folder-fill" aria-hidden="true"></span> Projects</h1>
    <button class="btn btn-primary" @onclick="ShowCreateProjectModal" @onclick:preventDefault="true">
        <span class="bi bi-plus-circle" aria-hidden="true"></span> New Project
    </button>
</div>

@if (isLoading)
{
    <div class="text-center py-5">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p class="mt-2 text-muted">Loading projects...</p>
    </div>
}
else if (projects?.Any() == true)
{
    <div class="row">
        @foreach (var project in projects)
        {
            <div class="col-md-6 col-lg-4 mb-4">
                <div class="card h-100">
                    <div class="card-body">
                        <h5 class="card-title">
                            <a href="/projects/@project.Id" class="text-decoration-none">
                                @project.Name
                            </a>
                        </h5>
                        <p class="card-text text-muted">@project.Description</p>
                        <div class="d-flex justify-content-between align-items-center">
                            <small class="text-muted">
                                Created @project.CreatedAt.ToString("MMM dd, yyyy")
                            </small>
                            <span class="badge bg-@(project.IsActive ? "success" : "secondary")">
                                @(project.IsActive ? "Active" : "Inactive")
                            </span>
                        </div>
                    </div>
                    <div class="card-footer bg-transparent">
                        <div class="btn-group w-100" role="group">
                            <a href="/projects/@project.Id" class="btn btn-outline-primary btn-sm">
                                <span class="bi bi-eye" aria-hidden="true"></span> View
                            </a>
                            <a href="/projects/@project.Id/tickets" class="btn btn-outline-secondary btn-sm">
                                <span class="bi bi-clipboard-data" aria-hidden="true"></span> Tickets
                            </a>
                            <button class="btn btn-outline-warning btn-sm" @onclick="() => ShowEditProjectModal(project)">
                                <span class="bi bi-pencil" aria-hidden="true"></span> Edit
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
}
else
{
    <div class="text-center py-5">
        <span class="bi bi-folder-x fs-1 text-muted d-block mb-3" aria-hidden="true"></span>
        <h3>No projects found</h3>
        <p class="text-muted mb-4">Create your first project to get started with ticket management.</p>
        <button class="btn btn-primary btn-lg" @onclick="ShowCreateProjectModal" @onclick:preventDefault="true">
            <span class="bi bi-plus-circle" aria-hidden="true"></span> Create Your First Project
        </button>
    </div>
}

<!-- Create/Edit Project Modal -->
@if (showProjectModal)
{
    <div class="modal fade show" style="display: block; background-color: rgba(0,0,0,0.5);" tabindex="-1" @onclick="HandleBackdropClick">
        <div class="modal-dialog" @onclick:stopPropagation="true">
            <div class="modal-content">
                <div class="modal-header">
                <h5 class="modal-title">@(isEditMode ? "Edit Project" : "Create New Project")</h5>
                <button type="button" class="btn-close" @onclick="HideProjectModal"></button>
            </div>
            <div class="modal-body">
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger alert-dismissible fade show" role="alert">
                        @errorMessage
                        @if (errorMessage.Contains("session has expired"))
                        {
                            <br/>
                            <a href="/Account/Login" class="btn btn-primary btn-sm mt-2">
                                <span class="bi bi-box-arrow-in-right" aria-hidden="true"></span> Login Again
                            </a>
                            <button type="button" class="btn btn-secondary btn-sm mt-2 ms-2" @onclick="RefreshPage">
                                <span class="bi bi-arrow-clockwise" aria-hidden="true"></span> Refresh Page
                            </button>
                        }
                        <button type="button" class="btn-close" @onclick="() => errorMessage = null"></button>
                    </div>
                }
                
                <EditForm Model="projectForm" OnValidSubmit="SaveProject">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="text-danger" />

                    <div class="mb-3">
                        <label for="projectName" class="form-label">Project Name</label>
                        <InputText id="projectName" class="form-control" @bind-Value="projectForm.Name" placeholder="Enter project name" />
                        <ValidationMessage For="@(() => projectForm.Name)" />
                    </div>

                    <div class="mb-3">
                        <label for="projectDescription" class="form-label">Description</label>
                        <InputTextArea id="projectDescription" class="form-control" rows="3" @bind-Value="projectForm.Description" placeholder="Enter project description" />
                        <ValidationMessage For="@(() => projectForm.Description)" />
                    </div>

                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="HideProjectModal">Cancel</button>
                        <button type="submit" class="btn btn-primary" disabled="@isSaving">
                            @if (isSaving)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                            }
                            @(isEditMode ? "Update Project" : "Create Project")
                        </button>
                    </div>
                </EditForm>
            </div>
            </div>
        </div>
    </div>
}

@code {
    private List<ProjectDto>? projects;
    private bool isLoading = true;
    private bool showProjectModal = false;
    private bool isEditMode = false;
    private bool isSaving = false;
    private ProjectFormModel projectForm = new();
    private ProjectDto? currentProject;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        // Debug authentication state
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        Logger.LogInformation("User authenticated: {IsAuthenticated}", authState.User.Identity?.IsAuthenticated);
        if (authState.User.Identity?.IsAuthenticated == true)
        {
            Logger.LogInformation("User claims: {Claims}", 
                string.Join(", ", authState.User.Claims.Select(c => $"{c.Type}={c.Value}")));
        }
        
        await LoadProjects();
    }

    private async Task LoadProjects()
    {
        isLoading = true;
        try
        {
            var response = await ApiClient.GetProjectsAsync();
            if (response?.Success == true && response.Data != null)
            {
                projects = response.Data.OrderByDescending(p => p.CreatedAt).ToList();
            }
            else
            {
                Logger.LogWarning("Failed to load projects. Response Success: {Success}, Has Data: {HasData}", response?.Success, response?.Data != null);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading projects");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ShowCreateProjectModal()
    {
        Logger.LogInformation("ShowCreateProjectModal called");
        isEditMode = false;
        projectForm = new ProjectFormModel();
        currentProject = null;
        errorMessage = null;
        showProjectModal = true;
        Logger.LogDebug("showProjectModal set to: {ShowProjectModal}", showProjectModal);
        StateHasChanged();
    }

    private void ShowEditProjectModal(ProjectDto project)
    {
        isEditMode = true;
        currentProject = project;
        projectForm = new ProjectFormModel
        {
            Name = project.Name,
            Description = project.Description
        };
        errorMessage = null;
        showProjectModal = true;
        StateHasChanged();
    }

    private void HideProjectModal()
    {
        showProjectModal = false;
        projectForm = new ProjectFormModel();
        currentProject = null;
        StateHasChanged();
    }

    private void HandleBackdropClick()
    {
        HideProjectModal();
    }
    
    private void RefreshPage()
    {
        Navigation.NavigateTo(Navigation.Uri, forceLoad: true);
    }

    private async Task SaveProject()
    {
        Logger.LogInformation("SaveProject called. IsEditMode: {IsEditMode}, Name: {Name}", isEditMode, projectForm.Name);
        
        isSaving = true;
        StateHasChanged();
        
        try
        {
            if (isEditMode && currentProject != null)
            {
                Logger.LogInformation("Updating project {ProjectId}", currentProject.Id);
                var updateDto = new UpdateProjectDto
                {
                    Name = projectForm.Name,
                    Description = projectForm.Description
                };

                var response = await ApiClient.UpdateProjectAsync(currentProject.Id, updateDto);
                Logger.LogInformation("Update response: Success={Success}", response?.Success);
                
                if (response?.Success == true)
                {
                    HideProjectModal();
                    await LoadProjects();
                }
                else
                {
                    Logger.LogWarning("Failed to update project. Response: {Response}", response);
                    errorMessage = response?.Message ?? "Failed to update project. Please try again.";
                }
            }
            else
            {
                Logger.LogInformation("Creating new project with name: {Name}", projectForm.Name);
                var createDto = new CreateProjectDto
                {
                    Name = projectForm.Name,
                    Description = projectForm.Description
                };

                var response = await ApiClient.CreateProjectAsync(createDto);
                Logger.LogInformation("Create response: Success={Success}", response?.Success);
                
                if (response?.Success == true)
                {
                    HideProjectModal();
                    await LoadProjects();
                }
                else
                {
                    Logger.LogWarning("Failed to create project. Response: {Response}", response);
                    errorMessage = response?.Message ?? "Failed to create project. Please try again.";
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error saving project");
            errorMessage = "An unexpected error occurred. Please try again.";
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }

    private class ProjectFormModel
    {
        [Required]
        [StringLength(200, MinimumLength = 1)]
        public string Name { get; set; } = string.Empty;

        [StringLength(2000)]
        public string Description { get; set; } = string.Empty;
    }
}