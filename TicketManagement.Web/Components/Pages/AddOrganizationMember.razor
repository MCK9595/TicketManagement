@page "/organizations/{organizationId:guid}/members/add"
@using TicketManagement.Web.Client.Services
@using TicketManagement.Contracts.DTOs
@using Microsoft.Extensions.Logging
@using Microsoft.AspNetCore.Components.Authorization
@using TicketManagement.Core.Enums
@inject TicketManagementApiClient ApiClient
@inject NavigationManager Navigation
@inject ILogger<AddOrganizationMember> Logger
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize]

<PageTitle>Add Member - @(organization?.DisplayName ?? "Organization") - Ticket Management</PageTitle>

@if (isLoading)
{
    <div class="text-center py-5">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p class="mt-2 text-muted">Loading organization details...</p>
    </div>
}
else if (organization != null)
{
    <div class="row justify-content-center">
        <div class="col-md-8">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="/organizations">Organizations</a></li>
                    <li class="breadcrumb-item"><a href="/organizations/@OrganizationId">@organization.DisplayName</a></li>
                    <li class="breadcrumb-item active" aria-current="page">Add Member</li>
                </ol>
            </nav>

            <div class="card">
                <div class="card-header">
                    <h4 class="mb-0">Add Member to @organization.DisplayName</h4>
                </div>
                <div class="card-body">
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger alert-dismissible fade show" role="alert">
                            @errorMessage
                            <button type="button" class="btn-close" @onclick="() => errorMessage = null"></button>
                        </div>
                    }

                    @if (!string.IsNullOrEmpty(successMessage))
                    {
                        <div class="alert alert-success alert-dismissible fade show" role="alert">
                            @successMessage
                            <button type="button" class="btn-close" @onclick="() => successMessage = null"></button>
                        </div>
                    }

                    <EditForm Model="memberForm" OnValidSubmit="AddMember">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger" />

                        <div class="mb-3">
                            <label for="userSearch" class="form-label">Search User</label>
                            <div class="input-group">
                                <InputText id="userSearch" class="form-control" @bind-Value="searchTerm" 
                                         @onkeyup="OnSearchKeyUp" placeholder="Enter username or email to search..." />
                                <button class="btn btn-outline-secondary" type="button" @onclick="SearchUsers" disabled="@isSearching">
                                    @if (isSearching)
                                    {
                                        <span class="spinner-border spinner-border-sm" role="status"></span>
                                    }
                                    else
                                    {
                                        <span class="bi bi-search" aria-hidden="true"></span>
                                    }
                                </button>
                            </div>
                        </div>

                        @if (searchResults?.Any() == true)
                        {
                            <div class="mb-3">
                                <label class="form-label">Search Results</label>
                                <div class="list-group" style="max-height: 300px; overflow-y: auto;">
                                    @foreach (var user in searchResults)
                                    {
                                        <button type="button" 
                                                class="list-group-item list-group-item-action @(selectedUser?.Id == user.Id ? "active" : "")"
                                                @onclick="() => SelectUser(user)">
                                            <div class="d-flex justify-content-between align-items-center">
                                                <div>
                                                    <div class="fw-medium">@(user.DisplayName ?? user.Username)</div>
                                                    <small class="text-muted">@user.Email</small>
                                                </div>
                                                @if (selectedUser?.Id == user.Id)
                                                {
                                                    <span class="bi bi-check-circle-fill text-success" aria-hidden="true"></span>
                                                }
                                            </div>
                                        </button>
                                    }
                                </div>
                            </div>
                        }
                        else if (searchResults != null && !string.IsNullOrWhiteSpace(searchTerm) && searchTerm.Length >= 2)
                        {
                            <div class="mb-3">
                                <div class="alert alert-info">
                                    <div class="d-flex align-items-center">
                                        <span class="bi bi-info-circle me-2" aria-hidden="true"></span>
                                        <div class="flex-grow-1">
                                            <strong>No users found</strong>
                                            <p class="mb-0 mt-1">Would you like to invite a new user with email "@searchTerm"?</p>
                                        </div>
                                    </div>
                                    <div class="mt-3 d-flex gap-2">
                                        <button type="button" class="btn btn-outline-primary btn-sm" 
                                                @onclick="() => ShowInviteForm(searchTerm)">
                                            <span class="bi bi-person-plus" aria-hidden="true"></span> Invite User
                                        </button>
                                        @if (isAdmin)
                                        {
                                            <button type="button" class="btn btn-primary btn-sm" 
                                                    @onclick="() => ShowCreateUserForm(searchTerm)">
                                                <span class="bi bi-person-add" aria-hidden="true"></span> Create User
                                            </button>
                                        }
                                    </div>
                                </div>
                            </div>
                        }

                        @if (showInviteForm)
                        {
                            <div class="mb-3">
                                <div class="card">
                                    <div class="card-header">
                                        <h6 class="mb-0">Invite New User</h6>
                                    </div>
                                    <div class="card-body">
                                        <div class="row">
                                            <div class="col-md-6">
                                                <label for="inviteEmail" class="form-label">Email Address *</label>
                                                <input type="email" id="inviteEmail" class="form-control" 
                                                       @bind="inviteForm.Email" placeholder="user@example.com" />
                                            </div>
                                            <div class="col-md-6">
                                                <label for="inviteRole" class="form-label">Role *</label>
                                                <select id="inviteRole" class="form-select" @bind="inviteForm.Role">
                                                    <option value="@OrganizationRole.Viewer">Viewer - Can view organization and projects</option>
                                                    <option value="@OrganizationRole.Member">Member - Can create and manage assigned tickets</option>
                                                    <option value="@OrganizationRole.Manager">Manager - Can manage projects and members</option>
                                                    <option value="@OrganizationRole.Admin">Admin - Full organization access</option>
                                                </select>
                                            </div>
                                        </div>
                                        <div class="row mt-3">
                                            <div class="col-md-6">
                                                <label for="inviteFirstName" class="form-label">First Name</label>
                                                <input type="text" id="inviteFirstName" class="form-control" 
                                                       @bind="inviteForm.FirstName" placeholder="Optional" />
                                            </div>
                                            <div class="col-md-6">
                                                <label for="inviteLastName" class="form-label">Last Name</label>
                                                <input type="text" id="inviteLastName" class="form-control" 
                                                       @bind="inviteForm.LastName" placeholder="Optional" />
                                            </div>
                                        </div>
                                        <div class="mt-3">
                                            <label for="inviteMessage" class="form-label">Invitation Message</label>
                                            <textarea id="inviteMessage" class="form-control" rows="3" 
                                                      @bind="inviteForm.Message" 
                                                      placeholder="Optional welcome message for the new user"></textarea>
                                        </div>
                                        <div class="mt-3 d-flex justify-content-end gap-2">
                                            <button type="button" class="btn btn-secondary" @onclick="CancelInvite">
                                                Cancel
                                            </button>
                                            <button type="button" class="btn btn-primary" 
                                                    @onclick="SendInvite" disabled="@(isSaving || string.IsNullOrWhiteSpace(inviteForm.Email))">
                                                @if (isSaving)
                                                {
                                                    <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                                }
                                                <span class="bi bi-send" aria-hidden="true"></span> Send Invitation
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }

                        @if (showCreateUserForm)
                        {
                            <div class="mb-3">
                                <div class="card border-primary">
                                    <div class="card-header bg-primary text-white">
                                        <h6 class="mb-0">Create New User</h6>
                                    </div>
                                    <div class="card-body">
                                        <div class="row">
                                            <div class="col-md-6">
                                                <label for="createUsername" class="form-label">Username *</label>
                                                <input type="text" id="createUsername" class="form-control" 
                                                       @bind="createUserForm.Username" placeholder="user123" />
                                            </div>
                                            <div class="col-md-6">
                                                <label for="createEmail" class="form-label">Email Address *</label>
                                                <input type="email" id="createEmail" class="form-control" 
                                                       @bind="createUserForm.Email" placeholder="user@example.com" />
                                            </div>
                                        </div>
                                        <div class="row mt-3">
                                            <div class="col-md-6">
                                                <label for="createFirstName" class="form-label">First Name</label>
                                                <input type="text" id="createFirstName" class="form-control" 
                                                       @bind="createUserForm.FirstName" placeholder="Optional" />
                                            </div>
                                            <div class="col-md-6">
                                                <label for="createLastName" class="form-label">Last Name</label>
                                                <input type="text" id="createLastName" class="form-control" 
                                                       @bind="createUserForm.LastName" placeholder="Optional" />
                                            </div>
                                        </div>
                                        <div class="row mt-3">
                                            <div class="col-md-6">
                                                <label for="createPassword" class="form-label">Password *</label>
                                                <div class="input-group">
                                                    <input type="@(showPassword ? "text" : "password")" 
                                                           id="createPassword" class="form-control" 
                                                           @bind="createUserForm.Password" 
                                                           placeholder="Enter password" />
                                                    <button type="button" class="btn btn-outline-secondary" 
                                                            @onclick="TogglePasswordVisibility">
                                                        <span class="bi bi-@(showPassword ? "eye-slash" : "eye")" aria-hidden="true"></span>
                                                    </button>
                                                </div>
                                            </div>
                                            <div class="col-md-6">
                                                <label for="createUserRole" class="form-label">Role *</label>
                                                <select id="createUserRole" class="form-select" @bind="createUserForm.Role">
                                                    <option value="@OrganizationRole.Viewer">Viewer - Can view organization and projects</option>
                                                    <option value="@OrganizationRole.Member">Member - Can create and manage assigned tickets</option>
                                                    <option value="@OrganizationRole.Manager">Manager - Can manage projects and members</option>
                                                    <option value="@OrganizationRole.Admin">Admin - Full organization access</option>
                                                </select>
                                            </div>
                                        </div>
                                        <div class="row mt-3">
                                            <div class="col-12">
                                                <div class="form-check">
                                                    <input type="checkbox" id="requirePasswordChange" class="form-check-input" 
                                                           @bind="createUserForm.RequirePasswordChange" />
                                                    <label for="requirePasswordChange" class="form-check-label">
                                                        Require password change on first login
                                                    </label>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="mt-3 d-flex justify-content-end gap-2">
                                            <button type="button" class="btn btn-secondary" @onclick="CancelCreateUser">
                                                Cancel
                                            </button>
                                            <button type="button" class="btn btn-primary" 
                                                    @onclick="CreateNewUser" 
                                                    disabled="@(isSaving || string.IsNullOrWhiteSpace(createUserForm.Username) || string.IsNullOrWhiteSpace(createUserForm.Email) || string.IsNullOrWhiteSpace(createUserForm.Password))">
                                                @if (isSaving)
                                                {
                                                    <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                                }
                                                <span class="bi bi-person-add" aria-hidden="true"></span> Create User
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }

                        @if (selectedUser != null)
                        {
                            <div class="mb-3">
                                <label class="form-label">Selected User</label>
                                <div class="card bg-light">
                                    <div class="card-body py-2">
                                        <div class="d-flex justify-content-between align-items-center">
                                            <div>
                                                <div class="fw-medium">@(selectedUser.DisplayName ?? selectedUser.Username)</div>
                                                <small class="text-muted">@selectedUser.Email</small>
                                            </div>
                                            <button type="button" class="btn btn-sm btn-outline-danger" @onclick="ClearSelectedUser">
                                                <span class="bi bi-x" aria-hidden="true"></span>
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="mb-3">
                                <label for="memberRole" class="form-label">Role</label>
                                <InputSelect id="memberRole" class="form-select" @bind-Value="memberForm.Role">
                                    <option value="@OrganizationRole.Viewer">Viewer - Can view organization and projects</option>
                                    <option value="@OrganizationRole.Member">Member - Can create and manage assigned tickets</option>
                                    <option value="@OrganizationRole.Manager">Manager - Can manage projects and members</option>
                                    <option value="@OrganizationRole.Admin">Admin - Full organization access</option>
                                </InputSelect>
                                <ValidationMessage For="@(() => memberForm.Role)" />
                            </div>
                        }

                        <div class="d-flex justify-content-between">
                            <a href="/organizations/@OrganizationId" class="btn btn-secondary">
                                <span class="bi bi-arrow-left" aria-hidden="true"></span> Back
                            </a>
                            <button type="submit" class="btn btn-primary" disabled="@(selectedUser == null || isSaving)">
                                @if (isSaving)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                }
                                <span class="bi bi-person-plus" aria-hidden="true"></span> Add Member
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <div class="text-center py-5">
        <span class="bi bi-exclamation-triangle fs-1 text-warning d-block mb-3" aria-hidden="true"></span>
        <h3>Organization not found</h3>
        <p class="text-muted">The organization you're looking for doesn't exist or you don't have permission to view it.</p>
        <a href="/organizations" class="btn btn-primary">
            <span class="bi bi-arrow-left" aria-hidden="true"></span> Back to Organizations
        </a>
    </div>
}

@code {
    [Parameter] public Guid OrganizationId { get; set; }

    private OrganizationDto? organization;
    private List<UserDto>? searchResults;
    private UserDto? selectedUser;
    private string searchTerm = string.Empty;
    private bool isLoading = true;
    private bool isSearching = false;
    private bool isSaving = false;
    private string? errorMessage;
    private string? successMessage;
    private AddMemberFormModel memberForm = new();
    private Timer? searchTimer;
    private bool showInviteForm = false;
    private bool showCreateUserForm = false;
    private bool showPassword = false;
    private bool isAdmin = false;
    private InviteFormModel inviteForm = new();
    private CreateUserFormModel createUserForm = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadOrganization();
        await CheckAdminStatus();
    }

    private async Task LoadOrganization()
    {
        isLoading = true;
        try
        {
            var response = await ApiClient.GetOrganizationAsync(OrganizationId);
            if (response?.Success == true)
            {
                organization = response.Data;
            }
            else
            {
                Logger.LogWarning("Failed to load organization {OrganizationId}: {Message}", 
                    OrganizationId, response?.Message);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading organization {OrganizationId}", OrganizationId);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task OnSearchKeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SearchUsers();
        }
        else
        {
            // Debounce search
            searchTimer?.Dispose();
            searchTimer = new Timer(async _ =>
            {
                await InvokeAsync(SearchUsers);
            }, null, 500, Timeout.Infinite);
        }
    }

    private async Task SearchUsers()
    {
        if (string.IsNullOrWhiteSpace(searchTerm) || searchTerm.Length < 2)
        {
            searchResults = null;
            StateHasChanged();
            return;
        }

        isSearching = true;
        StateHasChanged();

        try
        {
            var response = await ApiClient.SearchUsersAsync(searchTerm);
            if (response?.Success == true)
            {
                searchResults = response.Data?.ToList() ?? new List<UserDto>();
            }
            else
            {
                searchResults = new List<UserDto>();
                if (!string.IsNullOrEmpty(response?.Message))
                {
                    errorMessage = response.Message;
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error searching users with term: {SearchTerm}", searchTerm);
            searchResults = new List<UserDto>();
            errorMessage = "Error searching users. Please try again.";
        }
        finally
        {
            isSearching = false;
            StateHasChanged();
        }
    }

    private void SelectUser(UserDto user)
    {
        selectedUser = user;
        searchResults = null;
        searchTerm = string.Empty;
        errorMessage = null;
        StateHasChanged();
    }

    private void ClearSelectedUser()
    {
        selectedUser = null;
        StateHasChanged();
    }

    private async Task AddMember()
    {
        if (selectedUser == null) return;

        isSaving = true;
        errorMessage = null;
        successMessage = null;
        StateHasChanged();

        try
        {
            var addMemberDto = new AddOrganizationMemberDto
            {
                UserId = selectedUser.Id,
                UserName = selectedUser.Username,
                UserEmail = selectedUser.Email,
                Role = memberForm.Role
            };

            var response = await ApiClient.AddOrganizationMemberAsync(OrganizationId, addMemberDto);
            
            if (response?.Success == true)
            {
                successMessage = $"Successfully added {selectedUser.DisplayName ?? selectedUser.Username} to the organization.";
                
                // Clear form after successful addition
                selectedUser = null;
                memberForm = new AddMemberFormModel();
                
                // Navigate back after a short delay
                await Task.Delay(2000);
                Navigation.NavigateTo($"/organizations/{OrganizationId}");
            }
            else
            {
                errorMessage = response?.Message ?? "Failed to add member. Please try again.";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error adding member to organization {OrganizationId}", OrganizationId);
            errorMessage = "An unexpected error occurred. Please try again.";
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        searchTimer?.Dispose();
    }

    private void ShowInviteForm(string email)
    {
        inviteForm = new InviteFormModel { Email = email };
        showInviteForm = true;
        searchResults = null;
        searchTerm = string.Empty;
        StateHasChanged();
    }

    private void CancelInvite()
    {
        showInviteForm = false;
        inviteForm = new InviteFormModel();
        StateHasChanged();
    }

    private async Task SendInvite()
    {
        if (string.IsNullOrWhiteSpace(inviteForm.Email))
            return;

        isSaving = true;
        errorMessage = null;
        successMessage = null;
        StateHasChanged();

        try
        {
            var inviteDto = new InviteUserDto
            {
                Email = inviteForm.Email,
                OrganizationId = OrganizationId,
                Role = inviteForm.Role,
                FirstName = inviteForm.FirstName,
                LastName = inviteForm.LastName,
                Message = inviteForm.Message
            };

            var response = await ApiClient.InviteUserAsync(inviteDto);
            
            if (response?.Success == true && response.Data?.Success == true)
            {
                var result = response.Data;
                if (result.UserAlreadyExists)
                {
                    successMessage = $"User {inviteForm.Email} was already registered and has been added to the organization.";
                }
                else
                {
                    successMessage = $"Invitation sent to {inviteForm.Email}. A temporary password has been generated and they will be prompted to change it on first login.";
                }
                
                // Clear form and hide invite form
                showInviteForm = false;
                inviteForm = new InviteFormModel();
                
                // Navigate back after a short delay
                await Task.Delay(3000);
                Navigation.NavigateTo($"/organizations/{OrganizationId}");
            }
            else
            {
                errorMessage = response?.Data?.Message ?? response?.Message ?? "Failed to send invitation. Please try again.";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error sending invitation to {Email}", inviteForm.Email);
            errorMessage = "An unexpected error occurred. Please try again.";
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }

    private async Task CheckAdminStatus()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            if (authState.User.Identity?.IsAuthenticated == true)
            {
                var userId = authState.User.FindFirst("sub")?.Value ?? 
                           authState.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
                
                if (!string.IsNullOrEmpty(userId))
                {
                    // Check if user is system admin
                    var systemAdminResponse = await ApiClient.IsSystemAdminAsync(userId);
                    if (systemAdminResponse?.Data == true)
                    {
                        isAdmin = true;
                        return;
                    }

                    // Check if user is organization admin
                    var orgAdminResponse = await ApiClient.IsOrganizationAdminAsync(userId, OrganizationId);
                    if (orgAdminResponse?.Data == true)
                    {
                        isAdmin = true;
                        return;
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error checking admin status");
        }
    }

    private void ShowCreateUserForm(string email)
    {
        createUserForm = new CreateUserFormModel { Email = email };
        showCreateUserForm = true;
        searchResults = null;
        searchTerm = string.Empty;
        StateHasChanged();
    }

    private void CancelCreateUser()
    {
        showCreateUserForm = false;
        createUserForm = new CreateUserFormModel();
        StateHasChanged();
    }

    private void TogglePasswordVisibility()
    {
        showPassword = !showPassword;
        StateHasChanged();
    }

    private async Task CreateNewUser()
    {
        if (string.IsNullOrWhiteSpace(createUserForm.Username) || 
            string.IsNullOrWhiteSpace(createUserForm.Email) ||
            string.IsNullOrWhiteSpace(createUserForm.Password))
            return;

        isSaving = true;
        errorMessage = null;
        successMessage = null;
        StateHasChanged();

        try
        {
            var createDto = new CreateUserForOrganizationDto
            {
                Username = createUserForm.Username,
                Email = createUserForm.Email,
                FirstName = createUserForm.FirstName,
                LastName = createUserForm.LastName,
                Password = createUserForm.Password,
                RequirePasswordChange = createUserForm.RequirePasswordChange,
                OrganizationId = OrganizationId,
                Role = createUserForm.Role
            };

            var response = await ApiClient.CreateUserForOrganizationAsync(createDto);
            
            if (response?.Success == true && response.Data?.Success == true)
            {
                var result = response.Data;
                successMessage = $"User {createUserForm.Username} created successfully and added to the organization.";
                
                // Clear form and hide create form
                showCreateUserForm = false;
                createUserForm = new CreateUserFormModel();
                
                // Navigate back after a short delay
                await Task.Delay(2000);
                Navigation.NavigateTo($"/organizations/{OrganizationId}");
            }
            else
            {
                errorMessage = response?.Data?.Message ?? response?.Message ?? "Failed to create user. Please try again.";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error creating user {Username}", createUserForm.Username);
            errorMessage = "An unexpected error occurred. Please try again.";
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }

    private class AddMemberFormModel
    {
        [Required]
        public OrganizationRole Role { get; set; } = OrganizationRole.Member;
    }

    private class InviteFormModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = string.Empty;

        [Required]
        public OrganizationRole Role { get; set; } = OrganizationRole.Member;

        public string? FirstName { get; set; }
        public string? LastName { get; set; }
        public string? Message { get; set; }
    }

    private class CreateUserFormModel
    {
        [Required]
        public string Username { get; set; } = string.Empty;

        [Required]
        [EmailAddress]
        public string Email { get; set; } = string.Empty;

        public string? FirstName { get; set; }
        public string? LastName { get; set; }

        [Required]
        public string Password { get; set; } = string.Empty;

        [Required]
        public OrganizationRole Role { get; set; } = OrganizationRole.Member;

        public bool RequirePasswordChange { get; set; } = false;
    }
}