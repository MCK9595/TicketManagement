@page "/"
@using TicketManagement.Web.Client.Services
@using TicketManagement.Contracts.DTOs
@using Microsoft.AspNetCore.Authorization
@using TicketManagement.Web.Components.Shared
@inject TicketManagementApiClient ApiClient
@inject NavigationManager Navigation
@attribute [Authorize]

<PageTitle>Dashboard - Ticket Management</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-4">
    <div>
        <h1><span class="bi bi-speedometer2" aria-hidden="true"></span> Dashboard</h1>
        @if (selectedOrganization != null)
        {
            <p class="text-muted mb-0">
                <span class="bi bi-building me-1" aria-hidden="true"></span>
                @selectedOrganization.OrganizationDisplayName
            </p>
        }
    </div>
    <AuthorizeView>
        <Authorized>
            <div class="d-flex align-items-center gap-3">
                @if (userOrganizations?.Any() == true)
                {
                    <div class="dropdown">
                        <button class="btn btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                            <span class="bi bi-building me-2" aria-hidden="true"></span>
                            @if (selectedOrganization != null)
                            {
                                @selectedOrganization.OrganizationDisplayName
                            }
                            else
                            {
                                <span>All Organizations</span>
                            }
                        </button>
                        <ul class="dropdown-menu">
                            <li>
                                <button class="dropdown-item @(selectedOrganization == null ? "active" : "")" 
                                        @onclick="() => FilterByOrganization(null)">
                                    <span class="bi bi-globe me-2" aria-hidden="true"></span>All Organizations
                                </button>
                            </li>
                            <li><hr class="dropdown-divider"></li>
                            @foreach (var org in userOrganizations)
                            {
                                <li>
                                    <button class="dropdown-item @(selectedOrganization?.OrganizationId == org.OrganizationId ? "active" : "")"
                                            @onclick="() => FilterByOrganization(org)">
                                        <span class="bi bi-building me-2" aria-hidden="true"></span>
                                        @org.OrganizationDisplayName
                                    </button>
                                </li>
                            }
                        </ul>
                    </div>
                }
                <div class="text-muted">
                    Welcome back, @context.User.Identity?.Name
                </div>
            </div>
        </Authorized>
        <NotAuthorized>
            <a href="/login" class="btn btn-primary">
                <span class="bi bi-box-arrow-in-right" aria-hidden="true"></span> Login to continue
            </a>
        </NotAuthorized>
    </AuthorizeView>
</div>

@if (isLoading)
{
    <LoadingSpinner Message="Loading dashboard data..." 
                   Size="LoadingSpinner.LoadingSize.Large" 
                   AccessibleLabel="Loading dashboard information" />
}

<AuthorizeView>
    <Authorized>
        <div class="row">
            <!-- Quick Stats -->
            <div class="col-md-3 mb-3">
                <div class="card bg-primary text-white">
                    <div class="card-body">
                        <div class="d-flex justify-content-between">
                            <div>
                                <h4 class="card-title">@totalProjects</h4>
                                <p class="card-text">My Projects</p>
                            </div>
                            <div class="align-self-center">
                                <span class="bi bi-folder-fill fs-1" aria-hidden="true"></span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-md-3 mb-3">
                <div class="card bg-warning text-white">
                    <div class="card-body">
                        <div class="d-flex justify-content-between">
                            <div>
                                <h4 class="card-title">@totalTickets</h4>
                                <p class="card-text">Total Tickets</p>
                            </div>
                            <div class="align-self-center">
                                <span class="bi bi-clipboard-data-fill fs-1" aria-hidden="true"></span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-md-3 mb-3">
                <div class="card bg-success text-white">
                    <div class="card-body">
                        <div class="d-flex justify-content-between">
                            <div>
                                <h4 class="card-title">@openTickets</h4>
                                <p class="card-text">Open Tickets</p>
                            </div>
                            <div class="align-self-center">
                                <span class="bi bi-clipboard-check-fill fs-1" aria-hidden="true"></span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-md-3 mb-3">
                <div class="card bg-info text-white">
                    <div class="card-body">
                        <div class="d-flex justify-content-between">
                            <div>
                                <h4 class="card-title">@assignedTickets</h4>
                                <p class="card-text">Assigned to Me</p>
                            </div>
                            <div class="align-self-center">
                                <span class="bi bi-person-check-fill fs-1" aria-hidden="true"></span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Recent Projects -->
        <div class="row">
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">Recent Projects</h5>
                        <a href="/projects" class="btn btn-sm btn-outline-primary">View All</a>
                    </div>
                    <div class="card-body">
                        @if (recentProjects?.Any() == true)
                        {
                            <div class="list-group list-group-flush">
                                @foreach (var project in recentProjects.Take(5))
                                {
                                    <a href="/projects/@project.Id" class="list-group-item list-group-item-action">
                                        <div class="d-flex w-100 justify-content-between">
                                            <h6 class="mb-1">@project.Name</h6>
                                            <small class="text-muted">@project.CreatedAt.ToString("MMM dd")</small>
                                        </div>
                                        <p class="mb-1 text-muted">@project.Description</p>
                                        @if (selectedOrganization == null && !string.IsNullOrEmpty(project.OrganizationName))
                                        {
                                            <small class="text-muted">
                                                <span class="bi bi-building me-1" aria-hidden="true"></span>
                                                @project.OrganizationName
                                            </small>
                                        }
                                    </a>
                                }
                            </div>
                        }
                        else
                        {
                            <div class="text-center text-muted py-4">
                                <span class="bi bi-folder-x fs-1 d-block mb-2" aria-hidden="true"></span>
                                <p>No projects found</p>
                                <a href="/projects" class="btn btn-primary">Create Your First Project</a>
                            </div>
                        }
                    </div>
                </div>
            </div>

            <!-- Recent Tickets -->
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">Recent Tickets</h5>
                        <a href="/tickets" class="btn btn-sm btn-outline-primary">View All</a>
                    </div>
                    <div class="card-body">
                        @if (recentTickets?.Any() == true)
                        {
                            <div class="list-group list-group-flush">
                                @foreach (var ticket in recentTickets.Take(5))
                                {
                                    <a href="/tickets/@ticket.Id" class="list-group-item list-group-item-action">
                                        <div class="d-flex w-100 justify-content-between">
                                            <h6 class="mb-1">@ticket.Title</h6>
                                            <small class="text-muted">
                                                <span class="badge bg-@GetStatusColor(ticket.Status)">@ticket.Status</span>
                                            </small>
                                        </div>
                                        <p class="mb-1 text-muted">@ticket.ProjectName</p>
                                        <div class="d-flex justify-content-between align-items-center">
                                            <small class="text-muted">Priority: @ticket.Priority</small>
                                            @if (ticket.Assignments?.Any() == true)
                                            {
                                                <div class="d-flex align-items-center">
                                                    @foreach (var assignment in ticket.Assignments.Take(2))
                                                    {
                                                        <span class="avatar avatar-sm rounded-circle bg-primary text-white me-1" 
                                                              style="width: 20px; height: 20px; font-size: 0.7rem;"
                                                              title="@assignment.AssigneeName">
                                                            @(string.IsNullOrEmpty(assignment.AssigneeName) ? "?" : assignment.AssigneeName.Substring(0, 1).ToUpper())
                                                        </span>
                                                    }
                                                    @if (ticket.Assignments.Count > 2)
                                                    {
                                                        <span class="text-muted small">+@(ticket.Assignments.Count - 2)</span>
                                                    }
                                                </div>
                                            }
                                        </div>
                                    </a>
                                }
                            </div>
                        }
                        else
                        {
                            <div class="text-center text-muted py-4">
                                <span class="bi bi-clipboard-x fs-1 d-block mb-2" aria-hidden="true"></span>
                                <p>No tickets found</p>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        <div class="text-center py-5">
            <span class="bi bi-shield-lock fs-1 text-muted d-block mb-3" aria-hidden="true"></span>
            <h2>Welcome to Ticket Management System</h2>
            <p class="lead text-muted mb-4">Please log in to access your projects and tickets.</p>
            <a href="/login" class="btn btn-primary btn-lg">
                <span class="bi bi-box-arrow-in-right" aria-hidden="true"></span> Login
            </a>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    private List<ProjectDto>? allProjects;
    private List<ProjectDto>? recentProjects;
    private List<TicketDto>? recentTickets;
    private List<UserOrganizationDto>? userOrganizations;
    private UserOrganizationDto? selectedOrganization;
    private int totalProjects = 0;
    private int totalTickets = 0;
    private int openTickets = 0;
    private int assignedTickets = 0;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadUserOrganizations();
        await LoadDashboardData();
    }

    private async Task LoadUserOrganizations()
    {
        try
        {
            var response = await ApiClient.GetCurrentUserDetailsAsync();
            if (response?.Success == true && response.Data?.Organizations != null)
            {
                userOrganizations = response.Data.Organizations
                    .Where(o => o.IsActive)
                    .OrderBy(o => o.OrganizationDisplayName)
                    .ToList();

                // Auto-select first organization if only one available
                if (userOrganizations.Count == 1)
                {
                    selectedOrganization = userOrganizations.First();
                }
            }
            else
            {
                userOrganizations = new List<UserOrganizationDto>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading user organizations: {ex.Message}");
            userOrganizations = new List<UserOrganizationDto>();
        }
    }

    private async Task LoadDashboardData()
    {
        isLoading = true;
        try
        {
            // Load projects
            var projectsResponse = await ApiClient.GetProjectsAsync();
            if (projectsResponse?.Success == true && projectsResponse.Data != null)
            {
                allProjects = projectsResponse.Data.OrderByDescending(p => p.CreatedAt).ToList();
                FilterDataByOrganization();

                // Load tickets for each project and aggregate
                var allTickets = new List<TicketDto>();
                var projectsToLoad = recentProjects ?? new List<ProjectDto>();
                
                foreach (var project in projectsToLoad)
                {
                    var ticketsResponse = await ApiClient.GetProjectTicketsAsync(project.Id);
                    if (ticketsResponse?.Success == true && ticketsResponse.Data != null)
                    {
                        allTickets.AddRange(ticketsResponse.Data);
                    }
                }

                recentTickets = allTickets.OrderByDescending(t => t.CreatedAt).ToList();
                CalculateStatistics(allTickets);
            }
            else
            {
                recentProjects = new List<ProjectDto>();
                recentTickets = new List<TicketDto>();
                ResetStatistics();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading dashboard data: {ex.Message}");
            recentProjects = new List<ProjectDto>();
            recentTickets = new List<TicketDto>();
            ResetStatistics();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void FilterDataByOrganization()
    {
        if (allProjects == null)
        {
            recentProjects = new List<ProjectDto>();
            return;
        }

        if (selectedOrganization == null)
        {
            recentProjects = allProjects.ToList();
        }
        else
        {
            recentProjects = allProjects
                .Where(p => p.OrganizationId == selectedOrganization.OrganizationId)
                .ToList();
        }

        totalProjects = recentProjects.Count;
    }

    private void CalculateStatistics(List<TicketDto> tickets)
    {
        totalTickets = tickets.Count;
        openTickets = tickets.Count(t => t.Status != TicketManagement.Core.Enums.TicketStatus.Closed);
        assignedTickets = tickets.Count(t => t.Assignments.Any());
    }

    private void ResetStatistics()
    {
        totalProjects = 0;
        totalTickets = 0;
        openTickets = 0;
        assignedTickets = 0;
    }

    private async Task FilterByOrganization(UserOrganizationDto? organization)
    {
        selectedOrganization = organization;
        FilterDataByOrganization();
        
        // Reload tickets for the filtered projects
        var allTickets = new List<TicketDto>();
        var projectsToLoad = recentProjects ?? new List<ProjectDto>();
        
        foreach (var project in projectsToLoad)
        {
            var ticketsResponse = await ApiClient.GetProjectTicketsAsync(project.Id);
            if (ticketsResponse?.Success == true && ticketsResponse.Data != null)
            {
                allTickets.AddRange(ticketsResponse.Data);
            }
        }

        recentTickets = allTickets.OrderByDescending(t => t.CreatedAt).ToList();
        CalculateStatistics(allTickets);
        StateHasChanged();
    }

    private string GetStatusColor(TicketManagement.Core.Enums.TicketStatus status)
    {
        return status switch
        {
            TicketManagement.Core.Enums.TicketStatus.Open => "primary",
            TicketManagement.Core.Enums.TicketStatus.InProgress => "warning",
            TicketManagement.Core.Enums.TicketStatus.Review => "info",
            TicketManagement.Core.Enums.TicketStatus.Closed => "success",
            TicketManagement.Core.Enums.TicketStatus.OnHold => "dark",
            _ => "secondary"
        };
    }
}
