@using TicketManagement.Web.Services
@using Microsoft.AspNetCore.Components.Authorization
@inject NotificationHubService NotificationHub
@inject TicketManagementApiClient ApiClient
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">
            <span class="bi bi-clipboard-check" aria-hidden="true"></span>
            Ticket Management
        </a>
    </div>
</div>

<input type="checkbox" title="Navigation menu" class="navbar-toggler" />

<div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
    <nav class="nav flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="bi bi-house-door-fill" aria-hidden="true"></span> Dashboard
            </NavLink>
        </div>

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="organizations">
                <span class="bi bi-building" aria-hidden="true"></span> Organizations
            </NavLink>
        </div>

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="projects">
                <span class="bi bi-folder-fill" aria-hidden="true"></span> Projects
            </NavLink>
        </div>

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="tickets">
                <span class="bi bi-list-task" aria-hidden="true"></span> My Tickets
            </NavLink>
        </div>

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="notifications">
                <span class="bi bi-bell-fill" aria-hidden="true"></span> 
                Notifications
                @if (unreadCount > 0)
                {
                    <span class="notification-badge">@unreadCount</span>
                }
            </NavLink>
        </div>

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="reports">
                <span class="bi bi-bar-chart-fill" aria-hidden="true"></span> Reports
            </NavLink>
        </div>

        @if (isSystemAdmin)
        {
            <div class="nav-item px-3">
                <hr class="text-muted" />
                <small class="text-muted px-3">Administration</small>
            </div>
            
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="admin/users">
                    <span class="bi bi-people-fill" aria-hidden="true"></span> User Management
                </NavLink>
            </div>
        }

        <AuthorizeView>
            <Authorized>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="profile">
                        <span class="bi bi-person-fill" aria-hidden="true"></span> Profile
                    </NavLink>
                </div>
                
                <div class="nav-item px-3">
                    <form method="post" action="/Account/Logout">
                        <button type="submit" class="nav-link btn btn-link">
                            <span class="bi bi-box-arrow-right" aria-hidden="true"></span> Logout
                        </button>
                    </form>
                </div>
            </Authorized>
            <NotAuthorized>
                <div class="nav-item px-3">
                    <a class="nav-link" href="/login">
                        <span class="bi bi-box-arrow-in-right" aria-hidden="true"></span> Login
                    </a>
                </div>
            </NotAuthorized>
        </AuthorizeView>
    </nav>
</div>

@implements IDisposable

@code {
    private int unreadCount = 0;
    private bool isSystemAdmin = false;

    protected override async Task OnInitializedAsync()
    {
        NotificationHub.UnreadCountUpdated += OnUnreadCountUpdated;
        await CheckSystemAdminStatus();
    }

    private async Task CheckSystemAdminStatus()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            if (authState.User.Identity?.IsAuthenticated == true)
            {
                var userId = authState.User.FindFirst("sub")?.Value ?? 
                           authState.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
                
                if (!string.IsNullOrEmpty(userId))
                {
                    var response = await ApiClient.IsSystemAdminAsync(userId);
                    isSystemAdmin = response?.Data == true;
                    StateHasChanged();
                }
            }
        }
        catch (Exception)
        {
            // Silently handle errors - user just won't see admin menu
            isSystemAdmin = false;
        }
    }

    private void OnUnreadCountUpdated(int count)
    {
        unreadCount = count;
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        NotificationHub.UnreadCountUpdated -= OnUnreadCountUpdated;
    }
}
