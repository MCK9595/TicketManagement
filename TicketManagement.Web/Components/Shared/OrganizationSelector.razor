@using TicketManagement.Web.Client.Services
@using TicketManagement.Contracts.DTOs
@using Microsoft.Extensions.Logging
@using Microsoft.AspNetCore.Components.Authorization
@inject TicketManagementApiClient ApiClient
@inject ILogger<OrganizationSelector> Logger
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime

<div class="dropdown">
    <button class="btn btn-outline-primary dropdown-toggle" type="button" id="organizationDropdown" data-bs-toggle="dropdown" aria-expanded="false">
        <span class="bi bi-building me-2" aria-hidden="true"></span>
        @if (selectedOrganization != null)
        {
            @selectedOrganization.OrganizationDisplayName
        }
        else if (isLoading)
        {
            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
            <span>Loading...</span>
        }
        else
        {
            <span>Select Organization</span>
        }
    </button>
    <ul class="dropdown-menu" aria-labelledby="organizationDropdown" style="min-width: 280px;">
        @if (isLoading)
        {
            <li class="px-3 py-2">
                <div class="text-center">
                    <div class="spinner-border spinner-border-sm text-primary" role="status"></div>
                    <span class="ms-2">Loading organizations...</span>
                </div>
            </li>
        }
        else if (userOrganizations?.Any() == true)
        {
            <li><h6 class="dropdown-header">Your Organizations</h6></li>
            @foreach (var orgMembership in userOrganizations)
            {
                <li>
                    <button class="dropdown-item @(selectedOrganization?.OrganizationId == orgMembership.OrganizationId ? "active" : "")"
                            @onclick="() => SelectOrganization(orgMembership)">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <div class="fw-medium">@orgMembership.OrganizationDisplayName</div>
                                <small class="text-muted">@orgMembership.OrganizationName</small>
                            </div>
                            <div>
                                <span class="badge bg-@GetRoleBadgeColor(orgMembership.Role) small">
                                    @orgMembership.Role.ToString()
                                </span>
                                @if (selectedOrganization?.OrganizationId == orgMembership.OrganizationId)
                                {
                                    <span class="bi bi-check-lg text-success ms-1" aria-hidden="true"></span>
                                }
                            </div>
                        </div>
                    </button>
                </li>
            }
            <li><hr class="dropdown-divider"></li>
            <li>
                <a class="dropdown-item" href="/organizations">
                    <span class="bi bi-gear me-2" aria-hidden="true"></span>
                    Manage Organizations
                </a>
            </li>
        }
        else
        {
            <li class="px-3 py-2">
                <div class="text-center text-muted">
                    <span class="bi bi-building-x d-block mb-2" aria-hidden="true"></span>
                    <div>No organizations found</div>
                    <small>Join or create an organization to get started</small>
                </div>
            </li>
            <li><hr class="dropdown-divider"></li>
            <li>
                <a class="dropdown-item" href="/organizations">
                    <span class="bi bi-plus-circle me-2" aria-hidden="true"></span>
                    Create Organization
                </a>
            </li>
        }
    </ul>
</div>

@code {
    [Parameter] public EventCallback<UserOrganizationDto> OnOrganizationChanged { get; set; }

    private List<UserOrganizationDto>? userOrganizations;
    private UserOrganizationDto? selectedOrganization;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadUserOrganizations();
    }

    private async Task LoadUserOrganizations()
    {
        isLoading = true;
        try
        {
            Logger.LogInformation("Loading user organizations with roles...");
            var response = await ApiClient.GetOrganizationsWithRolesAsync();
            Logger.LogInformation("Response received: Success={Success}, Data={HasData}, Organizations={OrgCount}", 
                response?.Success, 
                response?.Data != null,
                response?.Data?.Count ?? 0);
                
            if (response?.Success == true && response.Data != null)
            {
                Logger.LogInformation("Raw organizations count: {Count}", response.Data.Count);
                
                userOrganizations = response.Data
                    .Where(o => o.IsActive)
                    .OrderBy(o => o.OrganizationDisplayName)
                    .ToList();
                    
                Logger.LogInformation("Active organizations count after filtering: {Count}", userOrganizations.Count);

                // Select the first organization as default, or the one from local storage
                if (userOrganizations.Any())
                {
                    var savedOrgId = await GetSavedOrganizationId();
                    selectedOrganization = userOrganizations
                        .FirstOrDefault(o => o.OrganizationId == savedOrgId)
                        ?? userOrganizations.First();

                    await NotifyOrganizationChanged();
                }
            }
            else
            {
                userOrganizations = new List<UserOrganizationDto>();
                Logger.LogWarning("Failed to load user organizations: Success={Success}, Message={Message}", 
                    response?.Success, response?.Message);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading user organizations");
            userOrganizations = new List<UserOrganizationDto>();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task SelectOrganization(UserOrganizationDto organization)
    {
        selectedOrganization = organization;
        await SaveSelectedOrganizationId(organization.OrganizationId);
        await NotifyOrganizationChanged();
        StateHasChanged();
    }

    private async Task NotifyOrganizationChanged()
    {
        if (selectedOrganization != null && OnOrganizationChanged.HasDelegate)
        {
            await OnOrganizationChanged.InvokeAsync(selectedOrganization);
        }
    }

    private async Task<Guid?> GetSavedOrganizationId()
    {
        try
        {
            var savedId = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "selectedOrganizationId");
            if (Guid.TryParse(savedId, out var guid))
            {
                return guid;
            }
        }
        catch (Exception ex)
        {
            Logger.LogWarning(ex, "Error reading selected organization from local storage");
        }
        return null;
    }

    private async Task SaveSelectedOrganizationId(Guid organizationId)
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "selectedOrganizationId", organizationId.ToString());
        }
        catch (Exception ex)
        {
            Logger.LogWarning(ex, "Error saving selected organization to local storage");
        }
    }

    private string GetRoleBadgeColor(TicketManagement.Core.Enums.OrganizationRole role)
    {
        return role switch
        {
            TicketManagement.Core.Enums.OrganizationRole.Admin => "danger",
            TicketManagement.Core.Enums.OrganizationRole.Manager => "warning",
            TicketManagement.Core.Enums.OrganizationRole.Member => "primary",
            TicketManagement.Core.Enums.OrganizationRole.Viewer => "secondary",
            _ => "secondary"
        };
    }

    public UserOrganizationDto? GetSelectedOrganization()
    {
        return selectedOrganization;
    }

    public async Task RefreshOrganizations()
    {
        await LoadUserOrganizations();
    }
}